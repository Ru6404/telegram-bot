import os
import logging
import random
import requests
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 123456789  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
AI_API_URL = "http://localhost:5000/api/ai/ask"  # URL –≤–∞—à–µ–≥–æ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞
# –ò–õ–ò –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –∫–∞–∫ fallback
OPENAI_API_KEY = "your-openai-api-key"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

def main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

def admin_main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

def admin_menu():
    return ReplyKeyboardMarkup([
        ["üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"],
        ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–∞–∑"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

async def ask_ai_assistant(question, user_context=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É
    """
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É
        payload = {
            "question": question,
            "context": user_context or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        }
        
        response = requests.post(
            AI_API_URL,
            json=payload,
            timeout=10,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            return data.get("answer", "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
        
    except requests.exceptions.RequestException:
        # –ï—Å–ª–∏ –≤–∞—à –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        pass
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: Fallback - –ø—Ä–æ—Å—Ç–æ–π –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
    return await fallback_ai_response(question)

async def fallback_ai_response(question):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    """
    question_lower = question.lower()
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    if any(word in question_lower for word in ['—Ä–µ—à–∏', '–ø–æ—Å—á–∏—Ç–∞–π', '–≤—ã—á–∏—Å–ª–∏', '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç', '=']):
        # –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            import re
            math_expr = re.search(r'(\d+[\+\-\*\/]\d+)', question)
            if math_expr:
                result = eval(math_expr.group(1))
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {math_expr.group(1)} = {result}"
        except:
            pass
        return "üî¢ –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–∞–ø–∏—à–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2+2' –∏–ª–∏ '5*3'"
    
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif any(word in question_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', 'python']):
        return "üíª –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Å–Ω–æ–≤–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    
    # –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
    elif any(word in question_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏']):
        return "üìö –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å!"
    
    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    elif any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%:%S %d.%m.%Y')}"
    
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    elif any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç']):
        return "üåç –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'"
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return "ü§ñ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏."

def is_admin(user_id):
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    await update.message.reply_text(
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"–¢–µ–ø–µ—Ä—å —è —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º! ü§ñ\n\n"
        f"–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ üë•‚úÖ\n"
        f"‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π üßÆ\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º üíª\n"
        f"‚Ä¢ –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!",
        reply_markup=main_menu() if user_id != ADMIN_ID else admin_main_menu()
    )

async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    original_text = update.message.text
    user = update.message.from_user
    user_id = user.id
    
    logger.info(f"User {user.first_name}: {original_text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    button_handlers = {
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë• –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        "‚úÖ –ó–∞–¥–∞—á–∏": "‚úÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...",
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! üü¢",
        "üìã –ü–æ–º–æ—â—å": "üìã –Ø —Ç–µ–ø–µ—Ä—å —Å –ò–ò! –°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ ü§ñ",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "üë§ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_user –ò–º—è Email",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É": "‚úÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_task –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ",
        "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò": "üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É!",
        "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å": lambda: "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:" if is_admin(user_id) else "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": lambda: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    }
    
    if original_text in button_handlers:
        handler = button_handlers[original_text]
        if callable(handler):
            response = handler()
        else:
            response = handler
        
        if original_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await update.message.reply_text(response, 
                                          reply_markup=main_menu() if user_id != ADMIN_ID else admin_main_menu())
        elif original_text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(user_id):
            await update.message.reply_text(response, reply_markup=admin_menu())
        else:
            await update.message.reply_text(response)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ò–ò
    await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    ai_response = await ask_ai_assistant(text, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(f"üí° –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫:\n\n{ai_response}")

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    admin_actions = {
        "‚úÖ –ü—Ä–∏–Ω—è—Ç—å": "‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.",
        "‚ùå –û—Ç–∫–∞–∑": "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω! –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë• –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏": "‚úÖ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15, –ó–∞–¥–∞—á: 42",
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à": "üîÑ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
    }
    
    if text in admin_actions:
        await update.message.reply_text(admin_actions[text])

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_message))
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex(r'^(‚úÖ –ü—Ä–∏–Ω—è—Ç—å|‚ùå –û—Ç–∫–∞–∑|üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏|üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã|üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à)$'), handle_admin_buttons))
    
    logger.info("ü§ñ –ë–æ—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò!")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ:")
    print("   ‚Ä¢ '–†–µ—à–∏ 2+2'")
    print("   ‚Ä¢ '–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É'")
    print("   ‚Ä¢ '–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python'")
    print("   ‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã!")
    
    application.run_polling()

if __name__ == "__main__":
    main()
