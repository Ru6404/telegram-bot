from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
import sys
import os
import requests
import json

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import BOT_TOKEN, ADMIN_ID, OPENAI_API_KEY
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py —Å BOT_TOKEN, ADMIN_ID –∏ OPENAI_API_KEY!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_QUESTION = 1

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
async def ask_ai(question):
    try:
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": question}],
            "temperature": 0.7
        }
        
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò"
            
    except Exception as e:
        logger.error(f"AI error: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"User {user.first_name} started the bot")
    
    await update.message.reply_text(
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await show_main_menu(update)
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update):
    keyboard = [
        ["ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"],
        ["üìã –ü–æ–º–æ—â—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò
async def start_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí° –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ò–ò:")
    return WAITING_QUESTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò
async def handle_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    user = update.message.from_user
    
    logger.info(f"User {user.first_name} asked AI: {question}")
    
    await update.message.reply_text("ü§î –î—É–º–∞—é...")
    
    ai_response = await ask_ai(question)
    
    await update.message.reply_text(f"üí° –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç:\n\n{ai_response}")
    await show_main_menu(update)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ —Å –ò–ò –æ—Ç–º–µ–Ω–µ–Ω")
    await show_main_menu(update)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    logger.info(f"User {user.first_name} pressed: {text}")
    
    responses = {
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! ‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã.",
        "üìã –ü–æ–º–æ—â—å": "üìã –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò'",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "menu"
    }
    
    response = responses.get(text)
    
    if response == "menu":
        await show_main_menu(update)
    elif response:
        await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # ConversationHandler –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò$"), start_ai_question)],
            states={
                WAITING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_question)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        
        print("ü§ñ –£–º–Ω—ã–π –±–æ—Ç —Å –ò–ò –∑–∞–ø—É—â–µ–Ω! (v2)")
        print("üöÄ –¢–µ–ø–µ—Ä—å –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞!")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
