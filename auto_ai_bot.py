import os
import logging
import random
import requests
import json
import socket
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 123456789  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤
AI_SERVICES = [
    {"name": "Local AI", "url": "http://localhost:5000/api/ai/ask", "timeout": 5},
    {"name": "Local GPT", "url": "http://127.0.0.1:8000/ask", "timeout": 5},
    {"name": "Cloud AI", "url": "http://api.ai-assistant.com/ask", "timeout": 10},
    {"name": "Fallback AI", "url": None, "timeout": 3}  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò
]

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
AI_URL_FROM_ENV = os.getenv('AI_API_URL') or os.getenv('ASSISTANT_URL') or os.getenv('GPT_SERVICE_URL')
if AI_URL_FROM_ENV:
    AI_SERVICES.insert(0, {"name": "Env AI", "url": AI_URL_FROM_ENV, "timeout": 8})

def check_service_availability(url, timeout):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    if not url:
        return False
        
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ URL
        from urllib.parse import urlparse
        parsed_url = urlparse(url)
        host = parsed_url.hostname
        port = parsed_url.port or (80 if parsed_url.scheme == 'http' else 443)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()
        
        return result == 0
    except:
        return False

def discover_ai_service():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –ò–ò-—Å–µ—Ä–≤–∏—Å"""
    for service in AI_SERVICES:
        if service["url"] and check_service_availability(service["url"], service["timeout"]):
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ò–ò-—Å–µ—Ä–≤–∏—Å: {service['name']} - {service['url']}")
            return service
    
    logger.info("‚ö†Ô∏è  –í–Ω–µ—à–Ω–∏–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò")
    return AI_SERVICES[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback

def main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

def admin_main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

def admin_menu():
    return ReplyKeyboardMarkup([
        ["üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"],
        ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–∞–∑"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

async def ask_ai_assistant(question, user_context=None):
    """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É —Å –∞–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º"""
    ai_service = discover_ai_service()
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    if ai_service["url"] and ai_service != AI_SERVICES[-1]:
        try:
            payload = {
                "question": question,
                "context": user_context or "Telegram bot user",
                "user_id": user_context.split("ID:")[1].split(")")[0].strip() if user_context and "ID:" in user_context else "unknown"
            }
            
            response = requests.post(
                ai_service["url"],
                json=payload,
                timeout=ai_service["timeout"],
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get("answer", data.get("response", data.get("text", "")))
                if answer:
                    return f"ü§ñ {ai_service['name']}:\n\n{answer}"
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {ai_service['name']}: {e}")
    
    # Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò
    return await smart_fallback_ai(question)
async def smart_fallback_ai(question):
    """–£–º–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫"""
    question_lower = question.lower()
    
    # –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ë–û–¢–ê
    if any(phrase in question_lower for phrase in ['—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å', '—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ç–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', 
                                                 '—á—Ç–æ —É–º–µ–µ—à—å', '—Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '—á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω',
                                                 '—á—Ç–æ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å', '–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏', '—á–µ–º –ø–æ–º–æ—á—å']):
        capabilities = [
            "üöÄ –Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ! –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
            "‚Ä¢ ü§ñ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—á–µ—Ä–µ–∑ –ò–ò)\n"
            "‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ üíª –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã\n"
            "‚Ä¢ ‚è∞ –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É\n\n"
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            
            "üéØ –ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n\n"
            "‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è üßÆ\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ üíª\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á ‚úÖ\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ üìä\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üåç\n"
            "‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞\n\n"
            "–°–ø—Ä–æ—Å–∏—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!",
            
            "üí° –Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! –ú–æ–≥—É:\n\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –†–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏\n"
            "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?"
        ]
        return random.choice(capabilities)
    
    # –ù–û–í–û–°–¢–ò
    if any(word in question_lower for word in ['–Ω–æ–≤–æ—Å—Ç–∏', 'news', '—Å–æ–±—ã—Ç–∏—è', '—Å–≤–µ–∂–µ–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ']):
        news_responses = [
            "üì∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–∏–º –Ω–æ–≤–æ—Å—Ç—è–º. "
            "–ù–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
            
            "üåê –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. "
            "–ê —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!",
            
            "üìª –ù–æ–≤–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–∫–∞—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. "
            "–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏!"
        ]
        return random.choice(news_responses)
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    math_patterns = [
        r'(\d+[\+\-\*\/]\d+)',  # 2+2, 5*3
        r'–ø–æ—Å—á–∏—Ç–∞–π (.+)',       # –ø–æ—Å—á–∏—Ç–∞–π 2+2
        r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (.+)',  # —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5*5
        r'—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä (.+)',    # —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä 10/2
    ]
    
    for pattern in math_patterns:
        import re
        match = re.search(pattern, question)
        if match:
            try:
                expr = match.group(1) if match.groups() else match.group(0)
                result = eval(expr)
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
    
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    if any(word in question_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', 'python', 'javascript', 'java', 'c++']):
        code_responses = [
            "üíª –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!",
            "üöÄ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Å–Ω–æ–≤–∞–º–∏ –∫–æ–¥–∞. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É?",
            "üë®‚Äçüíª –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –∑–∞–¥–∞—á—É",
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ: '–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è [–∑–∞–¥–∞—á–∞] –Ω–∞ [—è–∑—ã–∫]'"
        ]
        return random.choice(code_responses)
    
    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S %d.%m.%Y')}"
    
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç', '–ø–µ—Ä–µ–≤–æ–¥']):
        return "üåç –ù–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'"
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in question_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—á—Ç–æ –∑–Ω–∞—á–∏—Ç']):
        return "üìö –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Ö–∞–π', 'hello', 'hi']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    ai_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?",
        "üí° –•–æ—Ä–æ—à–æ, —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
        "üéØ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
        "üöÄ –ü—Ä–∏–Ω—è–ª! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    ]
    
    return random.choice(ai_responses)
    # –ù–û–í–û–°–¢–ò - –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ù–û–í–û–°–¢–ï–ô
    if any(word in question_lower for word in ['–Ω–æ–≤–æ—Å—Ç–∏', 'news', '—Å–æ–±—ã—Ç–∏—è', '—Å–≤–µ–∂–µ–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ']):
        news_responses = [
            "üì∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–∏–º –Ω–æ–≤–æ—Å—Ç—è–º. "
            "–ù–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
            
            "üåê –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. "
            "–ê —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!",
            
            "üìª –ù–æ–≤–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–∫–∞—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. "
            "–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏!"
        ]
        return random.choice(news_responses)
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    math_patterns = [
        r'(\d+[\+\-\*\/]\d+)',  # 2+2, 5*3
        r'–ø–æ—Å—á–∏—Ç–∞–π (.+)',       # –ø–æ—Å—á–∏—Ç–∞–π 2+2
        r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (.+)',  # —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5*5
        r'—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä (.+)',    # —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä 10/2
    ]
    
    for pattern in math_patterns:
        import re
        match = re.search(pattern, question)
        if match:
            try:
                expr = match.group(1) if match.groups() else match.group(0)
                result = eval(expr)
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
    
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    if any(word in question_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', 'python', 'javascript', 'java', 'c++']):
        code_responses = [
            "üíª –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!",
            "üöÄ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Å–Ω–æ–≤–∞–º–∏ –∫–æ–¥–∞. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É?",
            "üë®‚Äçüíª –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –∑–∞–¥–∞—á—É",
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ: '–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è [–∑–∞–¥–∞—á–∞] –Ω–∞ [—è–∑—ã–∫]'"
        ]
        return random.choice(code_responses)
    
    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S %d.%m.%Y')}"
    
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç', '–ø–µ—Ä–µ–≤–æ–¥']):
        return "üåç –ù–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'"
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in question_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—á—Ç–æ –∑–Ω–∞—á–∏—Ç']):
        return "üìö –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Ö–∞–π', 'hello', 'hi']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    ai_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?",
        "üí° –•–æ—Ä–æ—à–æ, —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
        "üéØ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
        "üöÄ –ü—Ä–∏–Ω—è–ª! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    ]
    
    return random.choice(ai_responses)
    """–£–º–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫"""
    question_lower = question.lower()
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    math_patterns = [
        r'(\d+[\+\-\*\/]\d+)',  # 2+2, 5*3
        r'–ø–æ—Å—á–∏—Ç–∞–π (.+)',       # –ø–æ—Å—á–∏—Ç–∞–π 2+2
        r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (.+)',  # —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5*5
        r'—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä (.+)',    # —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä 10/2
    ]
    
    for pattern in math_patterns:
        import re
        match = re.search(pattern, question)
        if match:
            try:
                expr = match.group(1) if match.groups() else match.group(0)
                result = eval(expr)
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
    
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    if any(word in question_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', 'python', 'javascript', 'java', 'c++']):
        code_responses = [
            "üíª –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!",
            "üöÄ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Å–Ω–æ–≤–∞–º–∏ –∫–æ–¥–∞. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É?",
            "üë®‚Äçüíª –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –∑–∞–¥–∞—á—É",
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ: '–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è [–∑–∞–¥–∞—á–∞] –Ω–∞ [—è–∑—ã–∫]'"
        ]
        return random.choice(code_responses)
    
    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S %d.%m.%Y')}"
    
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç', '–ø–µ—Ä–µ–≤–æ–¥']):
        return "üåç –ù–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'"
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in question_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—á—Ç–æ –∑–Ω–∞—á–∏—Ç']):
        return "üìö –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Ö–∞–π', 'hello', 'hi']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    ai_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?",
        "üí° –•–æ—Ä–æ—à–æ, —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
        "üéØ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
        "üöÄ –ü—Ä–∏–Ω—è–ª! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    ]
    
    return random.choice(ai_responses)

def is_admin(user_id):
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    # –ê–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    ai_service = discover_ai_service()
    service_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {ai_service['name']}" if ai_service['url'] else "‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò"
    
    await update.message.reply_text(
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"{service_status}\n\n"
        f"ü§ñ –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É:\n"
        f"‚Ä¢ –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ üßÆ\n"
        f"‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º üíª\n"
        f"‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üìö\n"
        f"‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
        reply_markup=main_menu() if user_id != ADMIN_ID else admin_main_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    user_id = user.id
    
    logger.info(f"User {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    button_handlers = {
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë• –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        "‚úÖ –ó–∞–¥–∞—á–∏": "‚úÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...",
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! üü¢",
        "üìã –ü–æ–º–æ—â—å": "üìã –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ! ü§ñ",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "üë§ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_user –ò–º—è Email",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É": "‚úÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_task –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ",
        "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò": "üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É!",
        "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å": lambda: "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:" if is_admin(user_id) else "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": lambda: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "‚úÖ –ü—Ä–∏–Ω—è—Ç—å": "‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!" if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
        "‚ùå –û—Ç–∫–∞–∑": "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!" if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
        "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë• –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫..." if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
        "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏": "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏..." if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞..." if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à": "üîÑ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!" if is_admin(user_id) else "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
    }
    
    if text in button_handlers:
        handler = button_handlers[text]
        response = handler() if callable(handler) else handler
        
        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await update.message.reply_text(response, reply_markup=main_menu() if user_id != ADMIN_ID else admin_main_menu())
        elif text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(user_id):
            await update.message.reply_text(response, reply_markup=admin_menu())
        else:
            await update.message.reply_text(response)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ò–ò
    await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    user_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})"
    ai_response = await ask_ai_assistant(text, user_context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(ai_response)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –ë–æ—Ç —Å –∞–≤—Ç–æ-–ò–ò –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –ò–ò-—Å–µ—Ä–≤–∏—Å—ã...")
    print("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º discovery –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    ai_service = discover_ai_service()
    print(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {ai_service['name']}")
    if ai_service['url']:
        print(f"üåê URL: {ai_service['url']}")
    else:
        print("‚ö° –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    application.run_polling()

if __name__ == "__main__":
    main()
