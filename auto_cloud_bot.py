import os
import logging
import asyncio
import httpx
import os
import logging
import httpx
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto-Cloud API (–í–ê–®–ê –°–•–ï–ú–ê)
AUTO_CLOUD_API_URL = "http://localhost:8000"

class AutoCloudAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º Auto-Cloud API"""
    
    def __init__(self, base_url: str = AUTO_CLOUD_API_URL):
        self.base_url = base_url
        
    async def get_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–≥–æ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/users", timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return None
    
    async def create_user(self, username: str, email: str):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–∞—à API"""
        try:
            async with httpx.AsyncClient() as client:
                data = {"username": username, "email": email}
                response = await client.post(f"{self.base_url}/users", json=data, timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def get_todos(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/todos", timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return None
    
    async def create_todo(self, title: str, description: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –≤–∞—à API"""
        try:
            async with httpx.AsyncClient() as client:
                data = {"title": title, "description": description}
                response = await client.post(f"{self.base_url}/todos", json=data, timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API (–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –í–ê–®–ï–ô –°–•–ï–ú–ï)
api_client = AutoCloudAPI()

async def process_message(message: str, user_id: int) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –≤–∞—à—É —Å—Ö–µ–º—É"""
    message_lower = message.lower().strip()
    
    # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', 'start', '–Ω–∞—á–∞—Ç—å']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –≤–∞—à–µ–π Auto-Cloud API —Å—Ö–µ–º–æ–π! üöÄ"
    
    # 2. –ü–æ–º–æ—â—å
    elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']):
        return "üìã *–ö–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å Auto-Cloud API:*\n\n" \
               "‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n" \
               "‚Ä¢ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
               "‚Ä¢ `–∑–∞–¥–∞—á–∏` - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" \
               "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@mail.ru`\n" \
               "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ`"
    
    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ò–ó –í–ê–®–ï–ì–û API)
    elif any(word in message_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç—É—Å']):
        users = await api_client.get_users()
        todos = await api_client.get_todos()
        
        if users is None or todos is None:
            return "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Auto-Cloud API!*\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python main.py`"
        
        return f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –≤–∞—à–µ–π —Å—Ö–µ–º—ã:*\n\n" \
               f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n" \
               f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {len(todos)}\n" \
               f"‚Ä¢ üè¢ Auto-Cloud API: –†–∞–±–æ—Ç–∞–µ—Ç"
    
    # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–ó –í–ê–®–ï–ì–û API)
    elif any(word in message_lower for word in ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'users']):
        users = await api_client.get_users()
        
        if users is None:
            return "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API!* –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à FastAPI —Å–µ—Ä–≤–µ—Ä."
        
        if not users:
            return "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≤–∞—à–µ–π —Å—Ö–µ–º—ã:*\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        users_list = "\n".join([f"‚Ä¢ üë§ {u.get('username', 'N/A')} ({u.get('email', 'N/A')})" for u in users[:5]])
        return f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≤–∞—à–µ–π —Å—Ö–µ–º—ã ({len(users)}):*\n\n{users_list}"
    
    # 5. –ó–∞–¥–∞—á–∏ (–ò–ó –í–ê–®–ï–ì–û API)
    elif any(word in message_lower for word in ['–∑–∞–¥–∞—á–∏', 'todos']):
        todos = await api_client.get_todos()
        
        if todos is None:
            return "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API!* –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à FastAPI —Å–µ—Ä–≤–µ—Ä."
        
        if not todos:
            return "‚úÖ *–ó–∞–¥–∞—á–∏ –∏–∑ –≤–∞—à–µ–π —Å—Ö–µ–º—ã:*\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á"
        
        todos_list = "\n".join([f"‚Ä¢ üìù {t.get('title', 'N/A')}" for t in todos[:5]])
        return f"‚úÖ *–ó–∞–¥–∞—á–∏ –∏–∑ –≤–∞—à–µ–π —Å—Ö–µ–º—ã ({len(todos)}):*\n\n{todos_list}"
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ß–ï–†–ï–ó –í–ê–® API)
    elif any(word in message_lower for word in ['—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']):
        try:
            parts = message.split(' ', 2)
            if len(parts) >= 3:
                username = parts[2].split(' ')[0]
                email = parts[2].split(' ')[1] if len(parts[2].split(' ')) > 1 else f"{username}@example.com"
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ê–® API
                result = await api_client.create_user(username, email)
                
                if result is None:
                    return "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API —Å–µ—Ä–≤–µ—Ä."
                
                return f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –≤–∞—à API!*\n\n" \
                       f"üë§ –ò–º—è: {result.get('username', 'N/A')}\n" \
                       f"üìß Email: {result.get('email', 'N/A')}\n" \
                       f"üÜî ID: {result.get('id', 'N/A')}"
        except:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@mail.ru'"
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ß–ï–†–ï–ó –í–ê–® API)
    elif any(word in message_lower for word in ['—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É']):
        try:
            parts = message.split(' ', 2)
            if len(parts) >= 3:
                title = parts[2].split(' ', 1)[0]
                description = parts[2].split(' ', 1)[1] if len(parts[2].split(' ', 1)) > 1 else "–û–ø–∏—Å–∞–Ω–∏–µ"
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ê–® API
                result = await api_client.create_todo(title, description)
                
                if result is None:
                    return "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API —Å–µ—Ä–≤–µ—Ä."
                
                return f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤–∞—à API!*\n\n" \
                       f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('title', 'N/A')}\n" \
                       f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', 'N/A')}\n" \
                       f"üÜî ID: {result.get('id', 'N/A')}"
        except:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ'"
    
    # 8. –î–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    else:
        return "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        response = await process_message(update.message.text, update.message.from_user.id)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Auto-Cloud API")
    print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–π —Å—Ö–µ–º–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto-Cloud API
AUTO_CLOUD_API_URL = "http://localhost:8000"

class AutoCloudAPI:
    def __init__(self, base_url: str = AUTO_CLOUD_API_URL):
        self.base_url = base_url
        
    async def get_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/users", timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def create_user(self, username: str, email: str):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with httpx.AsyncClient() as client:
                data = {"username": username, "email": email}
                response = await client.post(f"{self.base_url}/users", json=data, timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {"error": str(e)}
    
    async def get_todos(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/todos", timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []
    
    async def create_todo(self, title: str, description: str):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            async with httpx.AsyncClient() as client:
                data = {"title": title, "description": description}
                response = await client.post(f"{self.base_url}/todos", json=data, timeout=10.0)
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return {"error": str(e)}
    
    async def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            users = await self.get_users()
            todos = await self.get_todos()
            
            return {
                "users_count": len(users),
                "todos_count": len(todos),
                "status": "online"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
auto_cloud_api = AutoCloudAPI()

async def process_message(message: str, user_id: int) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Auto-Cloud API"""
    message_lower = message.lower().strip()
    
    # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if any(word in message_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç—É—Å', 'stats', 'status']):
        stats = await auto_cloud_api.get_stats()
        if isinstance(stats, dict) and 'error' in stats:
            return "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API!*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Auto-Cloud API –Ω–∞ localhost:8000"
        
        return f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Auto-Cloud API:*\n\n" \
               f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}\n" \
               f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {stats.get('todos_count', 0)}\n" \
               f"‚Ä¢ üü¢ –°—Ç–∞—Ç—É—Å: {stats.get('status', 'online')}"
    
    # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif any(word in message_lower for word in ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'users', '—é–∑–µ—Ä—ã']):
        users = await auto_cloud_api.get_users()
        if not users:
            return "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ"
        
        users_list = "\n".join([f"‚Ä¢ üë§ {user.get('username', 'N/A')} ({user.get('email', 'N/A')})" for user in users[:10]])
        return f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}"
    
    # 3. –ó–∞–¥–∞—á–∏
    elif any(word in message_lower for word in ['–∑–∞–¥–∞—á–∏', 'todos', '—Ç–∞—Å–∫–∏', 'tasks']):
        todos = await auto_cloud_api.get_todos()
        if not todos:
            return "‚úÖ *–ó–∞–¥–∞—á–∏:*\n\n–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ"
        
        todos_list = "\n".join([f"‚Ä¢ üìù {todo.get('title', 'N/A')}" for todo in todos[:10]])
        return f"‚úÖ *–ó–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}"
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif any(word in message_lower for word in ['—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']):
        parts = message.split(' ', 2)
        if len(parts) >= 3:
            try:
                # –ü–∞—Ä—Å–∏–º "—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@example.com"
                username = parts[2].split(' ')[0]
                email = parts[2].split(' ')[1] if len(parts[2].split(' ')) > 1 else f"{username}@example.com"
                
                result = await auto_cloud_api.create_user(username, email)
                if 'error' in result:
                    return f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n{result['error']}"
                
                return f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n" \
                       f"üë§ –ò–º—è: {result.get('username', 'N/A')}\n" \
                       f"üìß Email: {result.get('email', 'N/A')}\n" \
                       f"üÜî ID: {result.get('id', 'N/A')}"
            except Exception as e:
                return f"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞:*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@example.com'"
        else:
            return "üë§ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n`—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@example.com`"
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    elif any(word in message_lower for word in ['—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞']):
        parts = message.split(' ', 2)
        if len(parts) >= 3:
            try:
                # –ü–∞—Ä—Å–∏–º "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                title = parts[2].split(' ', 1)[0]
                description = parts[2].split(' ', 1)[1] if len(parts[2].split(' ', 1)) > 1 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                
                result = await auto_cloud_api.create_todo(title, description)
                if 'error' in result:
                    return f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:*\n\n{result['error']}"
                
                return f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n" \
                       f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('title', 'N/A')}\n" \
                       f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', 'N/A')}\n" \
                       f"üÜî ID: {result.get('id', 'N/A')}"
            except Exception as e:
                return f"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞:*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'"
        else:
            return "‚úÖ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n`—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`"
    
    # 6. –ü–æ–º–æ—â—å
    elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']):
        return "üöÄ *Auto-Cloud Bot –ö–æ–º–∞–Ω–¥—ã:*\n\n" \
               "‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã\n" \
               "‚Ä¢ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
               "‚Ä¢ `–∑–∞–¥–∞—á–∏` - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" \
               "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@example.com` - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
               "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ` - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n\n" \
               "üìä *Auto-Cloud API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000*"
    
    # 7. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'start', '–Ω–∞—á–∞—Ç—å']):
        return "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Cloud Bot!*\n\n" \
               "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π Auto-Cloud API —á–µ—Ä–µ–∑ Telegram!\n\n" \
               "–ù–∞–ø–∏—à–∏—Ç–µ `–ø–æ–º–æ—â—å` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    # 8. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        return "‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*\n\n" \
               "–ù–∞–ø–∏—à–∏—Ç–µ `–ø–æ–º–æ—â—å` –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        user_id = update.message.from_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
        
        response = await process_message(user_message, user_id)
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Cloud Bot!*\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Auto-Cloud API —á–µ—Ä–µ–∑ Telegram!\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ /todos - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã *–ö–æ–º–∞–Ω–¥—ã Auto-Cloud Bot:*\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ /todos - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n"
        "üìù *–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `–∑–∞–¥–∞—á–∏` - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@example.com`\n"
        "‚Ä¢ `—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
        "üìä *Auto-Cloud API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000*",
        parse_mode='Markdown'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    stats = await auto_cloud_api.get_stats()
    if isinstance(stats, dict) and 'error' in stats:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API!*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Auto-Cloud API", parse_mode='Markdown')
    else:
        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Auto-Cloud API:*\n\n"
            f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}\n"
            f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {stats.get('todos_count', 0)}\n"
            f"‚Ä¢ üü¢ –°—Ç–∞—Ç—É—Å: {stats.get('status', 'online')}",
            parse_mode='Markdown'
        )

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users"""
    users = await auto_cloud_api.get_users()
    if not users:
        await update.message.reply_text("üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ", parse_mode='Markdown')
    else:
        users_list = "\n".join([f"‚Ä¢ üë§ {user.get('username', 'N/A')} ({user.get('email', 'N/A')})" for user in users[:15]])
        await update.message.reply_text(f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}", parse_mode='Markdown')

async def todos_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /todos"""
    todos = await auto_cloud_api.get_todos()
    if not todos:
        await update.message.reply_text("‚úÖ *–ó–∞–¥–∞—á–∏:*\n\n–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ", parse_mode='Markdown')
    else:
        todos_list = "\n".join([f"‚Ä¢ üìù {todo.get('title', 'N/A')}" for todo in todos[:15]])
        await update.message.reply_text(f"‚úÖ *–ó–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}", parse_mode='Markdown')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("users", users_command))
        application.add_handler(CommandHandler("todos", todos_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("ü§ñ Auto-Cloud Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        print("‚úÖ Auto-Cloud Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üìä –ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Auto-Cloud API")
        print("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ Telegram")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
