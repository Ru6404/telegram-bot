import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

# === –ö–û–ù–§–ò–ì ===
API_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 5569793273

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    phone TEXT,
    comment TEXT
)
""")
conn.commit()

# === –°–¢–ê–†–¢ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# === –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
user_data = {}

@dp.message(lambda m: m.text == "üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def get_name(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("Ruslan:")

@dp.message(lambda m: m.from_user.id in user_data and "name" not in user_data[m.from_user.id])
async def save_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("+821021556564:")

@dp.message(lambda m: m.from_user.id in user_data and "phone" not in user_data[m.from_user.id])
async def save_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@dp.message(lambda m: m.from_user.id in user_data and "comment" not in user_data[m.from_user.id])
async def save_comment(message: types.Message):
    user_id = message.from_user.id
    name = user_data[user_id]["name"]
    phone = user_data[user_id]["phone"]
    comment = message.text

    cursor.execute(
        "INSERT INTO clients (name, phone, comment) VALUES (?, ?, ?)",
        (name, phone, comment)
    )
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    del user_data[user_id]

# === –ü–†–û–ß–ò–ï –ö–ù–û–ü–ö–ò ===
@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about(message: types.Message):
    await message.answer("–ú—ã –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ üöÄ")

@dp.message(lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
async def contact(message: types.Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +82-10-1234-5678")

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("SELECT * FROM clients")
    rows = cursor.fetchall()

    if not rows:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    msg = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for i, row in enumerate(rows, start=1):
        msg += f"#{row[0]} ‚Äî {row[1]}, {row[2]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[3]}\n\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 5 –∑–∞—è–≤–æ–∫, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        if i % 5 == 0:
            await message.answer(msg)
            msg = ""

    if msg:
        await message.answer(msg)

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
