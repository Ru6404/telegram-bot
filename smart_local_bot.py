from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import sys
import os
import random
import sqlite3
import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import BOT_TOKEN, ADMIN_ID
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py —Å BOT_TOKEN –∏ ADMIN_ID!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_history.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            user_name TEXT,
            message_text TEXT,
            bot_response TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_message(user_id, user_name, message_text, bot_response):
    try:
        conn = sqlite3.connect('bot_history.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO messages (user_id, user_name, message_text, bot_response)
            VALUES (?, ?, ?, ?)
        ''', (user_id, user_name, message_text, bot_response))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Database error: {e}")

# –õ–æ–∫–∞–ª—å–Ω–∞—è "–Ω–µ–π—Ä–æ—Å–µ—Ç—å" - —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
def get_local_ai_response(question):
    question_lower = question.lower()
    
    responses = {
        '–Ω–æ–≤–æ—Å—Ç–∏': [
            "üì∞ –°–µ–≥–æ–¥–Ω—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ: —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!",
            "üá∫üáø –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
            "üåê –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–∫—Ä–µ–ø–ª—è—é—Ç—Å—è",
            "üíº –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏: –ø—Ä–∏–≤–ª–µ—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        ],
        '–ø–æ–≥–æ–¥–∞': [
            "üåû –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞! +25¬∞C –≤ –¢–∞—à–∫–µ–Ω—Ç–µ",
            "‚òÅÔ∏è –õ–µ–≥–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, +22¬∞C",
            "üåßÔ∏è –í–æ–∑–º–æ–∂–Ω—ã –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏"
        ],
        '–∫—É—Ä—Å': [
            "üíµ USD: 12500 UZS | EUR: 13500 UZS | RUB: 140 UZS",
            "üìä –ö—É—Ä—Å —Å—Ç–∞–±–∏–ª–µ–Ω: USD ~12400-12600 UZS"
        ],
        '–ø—Ä–∏–≤–µ—Ç': [
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
            "üòä –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"
        ],
        '–∫–∞–∫ –¥–µ–ª–∞': [
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –±–µ–∑ —Å–±–æ–µ–≤",
            "üöÄ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º",
            "üëç –•–æ—Ä–æ—à–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        ],
        '—Å–ø–∞—Å–∏–±–æ': [
            "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!",
            "üåü –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!",
            "ü§ù –í—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!"
        ]
    }
    
    for key in responses:
        if key in question_lower:
            return random.choice(responses[key])
    
    general_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π",
        "üí° –ü–æ —ç—Ç–æ–π —Ç–µ–º–µ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º",
        "üìö –Ø –µ—â–µ —É—á—É—Å—å, –Ω–æ —Å–∫–æ—Ä–æ —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "üåü –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É",
        "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–æ–≤–æ—Å—Ç—è—Ö, –ø–æ–≥–æ–¥–µ –∏–ª–∏ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç",
        "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö!",
        "üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞—Å—Ç–µ—Ç, —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞",
        "üåç –°—Ç—Ä–∞–Ω–∞ —É–∫—Ä–µ–ø–ª—è–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
    ]
    
    return random.choice(general_responses)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update):
    keyboard = [
        ["üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üåû –ü–æ–≥–æ–¥–∞"],
        ["üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç", "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["üìã –ü–æ–º–æ—â—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"User {user.first_name} started the bot")
    
    await update.message.reply_text(
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø —É–º–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ:"
    )
    await show_main_menu(update)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if context.user_data.get('waiting_question'):
        response = get_local_ai_response(text)
        await update.message.reply_text(f"üí° –û—Ç–≤–µ—Ç:\n\n{response}")
        context.user_data['waiting_question'] = False
        save_message(user.id, user.first_name, text, response)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    responses = {
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏": lambda: get_local_ai_response("–Ω–æ–≤–æ—Å—Ç–∏"),
        "üåû –ü–æ–≥–æ–¥–∞": lambda: get_local_ai_response("–ø–æ–≥–æ–¥–∞"),
        "üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç": lambda: get_local_ai_response("–∫—É—Ä—Å"),
        "üìã –ü–æ–º–æ—â—å": "üìã –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ!",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "menu",
        "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å": "ask_question"
    }
    
    handler = responses.get(text)
    
    if handler == "menu":
        await show_main_menu(update)
        save_message(user.id, user.first_name, text, "menu_shown")
    elif handler == "ask_question":
        await update.message.reply_text("üí° –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        context.user_data['waiting_question'] = True
        save_message(user.id, user.first_name, text, "waiting_question")
    elif handler:
        response = handler() if callable(handler) else handler
        await update.message.reply_text(response)
        save_message(user.id, user.first_name, text, response)
    else:
        response = get_local_ai_response(text)
        await update.message.reply_text(response)
        save_message(user.id, user.first_name, text, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    print("ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üöÄ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ!")
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: bot_history.db")
    
    application.run_polling()

if __name__ == '__main__':
    main()
