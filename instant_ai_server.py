from http.server import HTTPServer, BaseHTTPRequestHandler
import json
from datetime import datetime

class InstantAIHandler(BaseHTTPRequestHandler):
    def _set_cors_headers(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS, GET')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç preflight –∑–∞–ø—Ä–æ—Å—ã"""
        self.send_response(200)
        self._set_cors_headers()
        self.end_headers()
    
    def do_GET(self):
        """–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self._set_cors_headers()
            self.end_headers()
            self.wfile.write('üöÄ AI Server is running! Use POST /api/ai/ask'.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç AI –∑–∞–ø—Ä–æ—Å—ã"""
        if self.path == '/api/ai/ask':
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                question = data.get('question', '').lower().strip()
                print(f"üì® –í–æ–ø—Ä–æ—Å: '{question}'")
                
                response = self.generate_response(question)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self._set_cors_headers()
                self.end_headers()
                
                response_data = json.dumps({
                    "answer": response,
                    "success": True
                })
                self.wfile.write(response_data.encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self._set_cors_headers()
                self.end_headers()
                error_data = json.dumps({
                    "success": False,
                    "error": str(e),
                    "answer": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                })
                self.wfile.write(error_data.encode('utf-8'))
    
    def generate_response(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        current_date = datetime.now().strftime('%d.%m.%Y')
        
        if '–ø—Ä–∏–≤–µ—Ç' in question:
            return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞!"
        
        if '–Ω–æ–≤–æ—Å—Ç–∏' in question and '—É–∑–±–µ–∫' in question:
            if '—Å–µ–≥–æ–¥–Ω—è' in question:
                return f"""üì∞ –ù–û–í–û–°–¢–ò –£–ó–ë–ï–ö–ò–°–¢–ê–ù–ê ({current_date}):

‚Ä¢ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞–≤–∫—É 14%
‚Ä¢ –ù–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ IT: $500 –º–ª–Ω
‚Ä¢ –†–µ–∫–æ—Ä–¥ —Ç—É—Ä–∏–∑–º–∞: 1.2 –º–ª–Ω visitors
‚Ä¢ –°–±–æ—Ä–Ω–∞—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —á–µ–º–ø–∏–æ–Ω–∞—Ç—É –ê–∑–∏–∏

üí° –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Å–ø–æ—Ä—Ç, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?"""
            else:
                return """üì∞ –ù–æ–≤–æ—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞:

‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç: 5.8% –≤ 2024
‚Ä¢ –í–í–ü –Ω–∞ –¥—É—à—É: $2,500
‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è: 10.2% –∑–∞ –≥–æ–¥
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: $7.8 –º–ª—Ä–¥

üìÖ –£—Ç–æ—á–Ω–∏—Ç–µ: "–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è\""""
        
        if '—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å' in question:
            return """ü§ñ –Ø –ú–û–ì–£:
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
‚Ä¢ üßÆ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤  
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –∏ –¥–∞—Ç—É
‚Ä¢ üí° –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üéØ –ü—Ä–∏–º–µ—Ä—ã: "–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è", "15*20", "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å\""""
        
        if any(op in question for op in ['+', '-', '*', '/', '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç']):
            try:
                expr = question.replace('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç', '').strip()
                expr = expr.replace('√ó', '*').replace('√∑', '/')
                if all(c in '0123456789+-*/. ()' for c in expr):
                    result = eval(expr)
                    return f"üßÆ {expr} = {result}"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å"
        
        if any(word in question for word in ['–≤—Ä–µ–º—è', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '–¥–∞—Ç–∞']):
            return f"‚è∞ {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
        
        return "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏."

if __name__ == '__main__':
    server_address = ('127.0.0.1', 5050)
    httpd = HTTPServer(server_address, InstantAIHandler)
    print("üöÄ –ò–ò-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5050")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
