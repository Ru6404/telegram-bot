import os
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
SITE_URL = os.getenv("SITE_URL", "http://localhost:8000")

if not TOKEN:
    print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ")

    keyboard = [
        [KeyboardButton("üìã –ö–ª–∏–µ–Ω—Ç—ã"), KeyboardButton("üìù –ó–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}")

    try:
        if text == "üìã –ö–ª–∏–µ–Ω—Ç—ã":
            r = requests.get(f"{SITE_URL}/api/clients")
            r.raise_for_status()
            data = r.json()
            msg = "\n".join([f"{c['id']}: {c['name']}" for c in data])
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n{msg}")
        elif text == "üìù –ó–∞—è–≤–∫–∏":
            r = requests.get(f"{SITE_URL}/api/requests")
            r.raise_for_status()
            data = r.json()
            for req in data:
                kb = [
                    [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{req['id']}"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{req['id']}")]
                ]
                markup = InlineKeyboardMarkup(kb)
                await update.message.reply_text(f"–ó–∞—è–≤–∫–∞: {req['title']}", reply_markup=markup)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            r = requests.get(f"{SITE_URL}/api/stats")
            r.raise_for_status()
            stats = r.json()
            msg = "\n".join([f"{k}: {v}" for k, v in stats.items()])
            await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{msg}")
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await update.message.reply_text(
                "–ü–æ–º–æ—â—å:\n- üìã –ö–ª–∏–µ–Ω—Ç—ã\n- üìù –ó–∞—è–≤–∫–∏\n- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n- ‚ùì –ü–æ–º–æ—â—å"
            )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ‚ùå")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ {text}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, req_id = query.data.split("_")
    req_id = int(req_id)
    try:
        r = requests.post(f"{SITE_URL}/api/request/{req_id}/action?action={'accepted' if action=='accept' else 'rejected'}")
        r.raise_for_status()
        await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ {req_id} {'–ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ' if action=='accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå'}")
        logger.info(f"–ó–∞—è–≤–∫–∞ {req_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {'accepted' if action=='accept' else 'rejected'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {req_id}: {e}")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {req_id}: {e}")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))
app.add_handler(CallbackQueryHandler(callback_handler))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
