import os
import logging
import random
import requests
import json
import socket
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 123456789  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤
AI_SERVICES = [
    {"name": "Local AI", "url": "http://localhost:5000/api/ai/ask", "timeout": 5},
    {"name": "Local GPT", "url": "http://127.0.0.1:8000/ask", "timeout": 5},
    {"name": "Fallback AI", "url": None, "timeout": 3}
]

def check_service_availability(url, timeout):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    if not url:
        return False
    try:
        from urllib.parse import urlparse
        parsed_url = urlparse(url)
        host = parsed_url.hostname
        port = parsed_url.port or (80 if parsed_url.scheme == 'http' else 443)
        
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def discover_ai_service():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –ò–ò-—Å–µ—Ä–≤–∏—Å"""
    for service in AI_SERVICES:
        if service["url"] and check_service_availability(service["url"], service["timeout"]):
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ò–ò-—Å–µ—Ä–≤–∏—Å: {service['name']}")
            return service
    logger.info("‚ö†Ô∏è  –í–Ω–µ—à–Ω–∏–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò")
    return AI_SERVICES[-1]

def main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

async def ask_ai_assistant(question, user_context=None):
    """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É"""
    ai_service = discover_ai_service()
    
    if ai_service["url"] and ai_service != AI_SERVICES[-1]:
        try:
            payload = {"question": question, "context": user_context or "Telegram bot"}
            response = requests.post(ai_service["url"], json=payload, timeout=ai_service["timeout"])
            if response.status_code == 200:
                data = response.json()
                answer = data.get("answer", data.get("response", data.get("text", "")))
                if answer:
                    return f"ü§ñ {ai_service['name']}:\n\n{answer}"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}")
    
    return await smart_fallback_ai(question)

async def smart_fallback_ai(question):
    """–£–º–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    question_lower = question.lower()
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if question_lower in ['—Å –∫–∞–∫–∏–º–∏', '–∫–∞–∫–∏–µ', '—á—Ç–æ –µ—â–µ', '–µ—â–µ']:
        return """üéØ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:

‚Ä¢ üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: "—Ä–µ—à–∏ 2+2", "–ø–æ—Å—á–∏—Ç–∞–π 5*5"
‚Ä¢ üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: "–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python", "–ø–æ–º–æ–≥–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"
‚Ä¢ üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–¥–∞—á–∏, —Å—Ç–∞—Ç—É—Å
‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥—ã: "–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞?"
‚Ä¢ üìö –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: "–æ–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É", "—á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò"

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""

    # –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–∞
    if any(word in question_lower for word in ['–∞–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–∞', '–±–∞–Ω–∫ –∞–Ω–∞–ª–∏–∑', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑']):
        return """üè¶ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫–∞ –º–æ–≥—É –ø–æ–º–æ—á—å:

‚Ä¢ üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ)
‚Ä¢ üí∞ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ä–∏—Å–∫–∏
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
‚Ä¢ üîç Risk management

–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É!"""

    # –ù–æ–≤–æ—Å—Ç–∏
    if any(word in question_lower for word in ['–Ω–æ–≤–æ—Å—Ç–∏', 'news', '—Å–º–∏', '—Å–æ–±—ã—Ç–∏—è']):
        return """üì∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–∏–º –Ω–æ–≤–æ—Å—Ç—è–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

–ù–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–µ—Ç–µ)
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ üîç –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π?"""

    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    math_patterns = [r'(\d+[\+\-\*\/]\d+)', r'–ø–æ—Å—á–∏—Ç–∞–π (.+)', r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (.+)', r'—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä (.+)']
    for pattern in math_patterns:
        import re
        match = re.search(pattern, question)
        if match:
            try:
                expr = match.group(1) if match.groups() else match.group(0)
                result = eval(expr)
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è."

    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    if any(word in question_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', 'python', 'javascript']):
        return """üíª –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º!

‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ Python, JavaScript, Java, C++
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
‚Ä¢ Code review

–ö–∞–∫–æ–π —è–∑—ã–∫ –∏ –∑–∞–¥–∞—á–∞?"""

    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S %d.%m.%Y')}"

    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç', '–ø–µ—Ä–µ–≤–æ–¥']):
        return "üåç –ù–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'\n–ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'"

    # –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å
    if any(word in question_lower for word in ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏', '—á—Ç–æ –º–æ–∂–µ—à—å']):
        return """üöÄ –Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ! –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ ü§ñ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—á–µ—Ä–µ–∑ –ò–ò)
‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ üíª –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã
‚Ä¢ ‚è∞ –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Ö–∞–π', 'hello', 'hi']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"

    # –£–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    ai_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
        "üí° –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —ç—Ç–æ–π —Ç–µ–º–µ?",
        "üéØ –•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É... –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å?",
        "üöÄ –ü—Ä–∏–Ω—è–ª –∫ —Å–≤–µ–¥–µ–Ω–∏—é! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    ]
    
    return random.choice(ai_responses)

def is_admin(user_id):
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    ai_service = discover_ai_service()
    service_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {ai_service['name']}" if ai_service['url'] else "‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò"
    
    await update.message.reply_text(
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"{service_status}\n\n"
        f"ü§ñ –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –º–æ–≥—É:\n"
        f"‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å follow-up –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –ø–æ–º–æ—â—å",
        reply_markup=main_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    user_id = user.id
    
    logger.info(f"User {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    button_handlers = {
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë• –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        "‚úÖ –ó–∞–¥–∞—á–∏": "‚úÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...",
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! üü¢",
        "üìã –ü–æ–º–æ—â—å": "üìã –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ! ü§ñ",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "üë§ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_user –ò–º—è Email",
        "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É": "‚úÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: /add_task –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ",
        "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò": "üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É!",
        "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å": lambda: "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:" if is_admin(user_id) else "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    }
    
    if text in button_handlers:
        handler = button_handlers[text]
        response = handler() if callable(handler) else handler
        await update.message.reply_text(response, reply_markup=main_menu())
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ò–ò
    await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    user_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})"
    ai_response = await ask_ai_assistant(text, user_context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(ai_response)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –£–º–Ω—ã–π –±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!")
    print("üéØ –¢–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞–µ—Ç:")
    print("   ‚Ä¢ '–° –∫–∞–∫–∏–º–∏' (–ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)")
    print("   ‚Ä¢ '–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–∞' (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ–º–∞)")
    print("   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ follow-up –≤–æ–ø—Ä–æ—Å—ã")
    
    application.run_polling()

if __name__ == "__main__":
    main()
