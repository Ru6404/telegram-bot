import logging
import sqlite3
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    name TEXT,
    username TEXT,
    phone TEXT,
    comment TEXT,
    status TEXT DEFAULT 'new',
    viewed INTEGER DEFAULT 0
)
''')
conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_keyboard)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É ---
@dp.message_handler(lambda m: m.text == "üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def leave_request(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö ---
async def notify_admin_new_requests():
    while True:
        cursor.execute('SELECT id, name FROM clients WHERE status="new" AND viewed=0')
        new_requests = cursor.fetchall()
        for req in new_requests:
            await bot.send_message(
                ADMIN_ID,
                f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: #{req[0]} ‚Äî {req[1]}"
            )
            cursor.execute('UPDATE clients SET viewed=1 WHERE id=?', (req[0],))
            conn.commit()
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(notify_admin_new_requests())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
