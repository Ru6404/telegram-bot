import os
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–∫–∞–∫ –≤ Auto-Cloud API)
users_db = []
todos_db = []

async def process_message(message: str, user_id: int) -> str:
    message_lower = message.lower().strip()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in message_lower:
        return f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_db)}\n‚úÖ –ó–∞–¥–∞—á: {len(todos_db)}"
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message_lower:
        if not users_db:
            return "üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        users_list = "\n".join([f"‚Ä¢ {u['username']} ({u['email']})" for u in users_db])
        return f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}"
    
    # –ó–∞–¥–∞—á–∏
    elif '–∑–∞–¥–∞—á–∏' in message_lower:
        if not todos_db:
            return "‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á"
        todos_list = "\n".join([f"‚Ä¢ {t['title']}" for t in todos_db])
        return f"‚úÖ –ó–∞–¥–∞—á–∏:\n{todos_list}"
    
    # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif '—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in message_lower:
        try:
            parts = message.split(' ', 2)
            if len(parts) >= 3:
                username = parts[2].split(' ')[0]
                email = parts[2].split(' ')[1] if len(parts[2].split(' ')) > 1 else f"{username}@mail.ru"
                
                user = {
                    "id": len(users_db) + 1,
                    "username": username,
                    "email": email,
                    "created_at": datetime.now().isoformat()
                }
                users_db.append(user)
                return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!\nüë§ {username}\nüìß {email}"
        except:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@mail.ru'"
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    elif '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' in message_lower:
        try:
            parts = message.split(' ', 2)
            if len(parts) >= 3:
                title = parts[2].split(' ', 1)[0]
                description = parts[2].split(' ', 1)[1] if len(parts[2].split(' ', 1)) > 1 else "–û–ø–∏—Å–∞–Ω–∏–µ"
                
                todo = {
                    "id": len(todos_db) + 1,
                    "title": title,
                    "description": description,
                    "created_at": datetime.now().isoformat()
                }
                todos_db.append(todo)
                return f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüìù {title}\nüìã {description}"
        except:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ'"
    
    # –ü–æ–º–æ—â—å
    elif '–ø–æ–º–æ—â—å' in message_lower:
        return "üöÄ –ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ –∑–∞–¥–∞—á–∏\n‚Ä¢ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω mail@mail.ru\n‚Ä¢ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ"
    
    else:
        return "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = await process_message(update.message.text, update.message.from_user.id)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def main():
    application = Application.builder().token(BOT_TOKEN).build()    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
