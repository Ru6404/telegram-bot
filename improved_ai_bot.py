import os
import logging
import random
import requests
import json
import socket
import re
import math
import asyncio
from datetime import datetime
from urllib.parse import urlparse
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from telegram.error import BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_env_var(name, default=None):
    value = os.getenv(name)
    if value is None:
        return default
    return value

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BOT_TOKEN = get_env_var("BOT_TOKEN", "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ADMIN_ID
try:
    ADMIN_ID = int(get_env_var("ADMIN_ID", "5569793273"))
except ValueError:
    logger.warning("ADMIN_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    ADMIN_ID = 5569793273

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤
AI_SERVICES = [
    {"name": "Local AI", "url": "http://localhost:5000/api/ai/ask", "timeout": 5, "priority": 10},
    {"name": "Local GPT", "url": "http://127.0.0.1:8000/ask", "timeout": 5, "priority": 9},
    {"name": "Cloud AI", "url": "http://api.ai-assistant.com/ask", "timeout": 10, "priority": 8},
    {"name": "Fallback AI", "url": None, "timeout": 3, "priority": 1}
]

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
AI_API_URL = get_env_var("AI_API_URL")
if AI_API_URL:
    AI_SERVICES.insert(0, {
        "name": "Custom AI", 
        "url": AI_API_URL, 
        "timeout": 8, 
        "priority": 11  # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    })

# –ö—ç—à –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
discovered_services = {}
last_discovery_time = 0
DISCOVERY_CACHE_TIME = 300  # 5 –º–∏–Ω—É—Ç

class SafeEvaluator:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    
    @staticmethod
    def safe_eval(expression):
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_expr = re.sub(r'[^0-9+\-*/().]', '', expression)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if any(op in clean_expr for op in ['**', '//', '>>', '<<', '%', '&', '|', '^', '~']):
                return None
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ast.literal_eval –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            import ast
            node = ast.parse(clean_expr, mode='eval')
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            for n in ast.walk(node):
                if isinstance(n, (ast.Call, ast.Attribute, ast.Subscript)):
                    return None
            
            return eval(compile(node, '<string>', 'eval'), {'__builtins__': None}, {})
        except:
            return None

def check_service_availability(url, timeout):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    if not url:
        return False
        
    try:
        parsed_url = urlparse(url)
        host = parsed_url.hostname
        port = parsed_url.port or (80 if parsed_url.scheme == 'http' else 443)
        
        # –î–ª—è localhost –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
        if host in ['localhost', '127.0.0.1']:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            sock.close()
            return result == 0
        else:
            # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
            try:
                response = requests.get(f"{parsed_url.scheme}://{host}:{port}/", timeout=timeout)
                return response.status_code < 500
            except:
                # –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º endpoint
                try:
                    response = requests.head(url, timeout=timeout)
                    return response.status_code < 500
                except:
                    return False
    except:
        return False

async def discover_ai_services():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã"""
    global discovered_services, last_discovery_time
    
    current_time = datetime.now().timestamp()
    if current_time - last_discovery_time < DISCOVERY_CACHE_TIME and discovered_services:
        return discovered_services
    
    discovered_services = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    for service in sorted(AI_SERVICES, key=lambda x: x['priority'], reverse=True):
        if service["url"]:
            is_available = await asyncio.get_event_loop().run_in_executor(
                None, check_service_availability, service['url'], service['timeout']
            )
            if is_available:
                discovered_services[service['name']] = service
                logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {service['name']} - {service['url']}")
    
    last_discovery_time = current_time
    return discovered_services
async def ask_ai_assistant(question, user_context=None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò-—Å–µ—Ä–≤–µ—Ä"""
    try:
        # –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö –°–ï–†–í–ï–†–£
        payload = {
            "question": question,
            "context": user_context or "Telegram bot user"
        }
        
        response = requests.post(
            "http://127.0.0.1:5050/api/ai/ask",
            json=payload,
            timeout=5,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", "")
            if answer:
                return f"ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫:\n\n{answer}"
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò: {e}")
    
    # Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return await smart_fallback_ai(question)

    

async def query_external_ai(service, question, user_context):
    """–ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É –ò–ò-—Å–µ—Ä–≤–∏—Å—É"""
    try:
        payload = {
            "question": question,
            "context": user_context or "Telegram bot user",
            "user_id": "unknown"
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if user_context and "ID:" in user_context:
            try:
                user_id = user_context.split("ID:")[1].split(")")[0].strip()
                payload["user_id"] = user_id
            except:
                pass
        
        response = requests.post(
            service["url"],
            json=payload,
            timeout=service["timeout"],
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", data.get("response", data.get("text", "")))
            if answer:
                return f"ü§ñ {service['name']}:\n\n{answer}"
                
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {service['name']}: {e}")
    
    return await smart_fallback_ai(question)

async def smart_fallback_ai(question):
    """–£–º–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    question_lower = question.lower()
    
    # –ë–æ—Ç –æ —Å–µ–±–µ
    if any(word in question_lower for word in ['—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏', '–∫–æ–º–∞–Ω–¥—ã', '—Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏']):
        return """ü§ñ –Ø –º–æ–≥—É:

‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: 2+2, 5*8, 100/4
‚Ä¢ ‚è∞ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É: \"–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?\"
‚Ä¢ üåç –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º: \"–ü–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\"
‚Ä¢ üìö –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ
‚Ä¢ üíª –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é

–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ! –ù–∞–ø—Ä–∏–º–µ—Ä: 
\"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15*20\" 
\"–ù–æ–≤–æ—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞\"
\"–†–∞—Å—Å–∫–∞–∂–∏ –æ –¢–∞—à–∫–µ–Ω—Ç–µ\""""

    # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
    if any(word in question_lower for word in ['—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω', '—É–∑–±–µ–∫', '—Ç–∞—à–∫–µ–Ω—Ç', '—Å–∞–º–∞—Ä–∫–∞–Ω–¥', '–±—É—Ö–∞—Ä–∞']):
        return """üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω - –∂–µ–º—á—É–∂–∏–Ω–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏!

–°—Ç–æ–ª–∏—Ü–∞: –¢–∞—à–∫–µ–Ω—Ç
–ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –°–∞–º–∞—Ä–∫–∞–Ω–¥, –ë—É—Ö–∞—Ä–∞, –ù–∞–º–∞–Ω–≥–∞–Ω, –ê–Ω–¥–∏–∂–∞–Ω
–í–∞–ª—é—Ç–∞: –£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º (UZS)
–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~35 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫
–Ø–∑—ã–∫: –£–∑–±–µ–∫—Å–∫–∏–π

–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –†–µ–≥–∏—Å—Ç–∞–Ω, –º–∞–≤–∑–æ–ª–µ–π –°–∞–º–∞–Ω–∏–¥–æ–≤, –ß–æ—Ä-–ú–∏–Ω–æ—Ä
–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ? –ò—Å—Ç–æ—Ä–∏—è, –∫—É–ª—å—Ç—É—Ä–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Ç—É—Ä–∏–∑–º?"""

    # –ù–æ–≤–æ—Å—Ç–∏
    if '–Ω–æ–≤–æ—Å—Ç–∏' in question_lower:
        if '—É–∑–±–µ–∫' in question_lower:
            return """üì∞ –ù–æ–≤–æ—Å—Ç–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞:

‚Ä¢ –≠–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ 5.8% –≤ —ç—Ç–æ–º –≥–æ–¥—É
‚Ä¢ –¢—É—Ä–∏–∑–º —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 30% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª
‚Ä¢ –ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –í –¢–∞—à–∫–µ–Ω—Ç–µ –ø—Ä–æ—à–ª–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è

–£—Ç–æ—á–Ω–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–µ–º—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"""
        else:
            return "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ
    if '–∏–∑–º–µ–Ω–µ–Ω–∏—è' in question_lower and '—É–∑–±–µ–∫' in question_lower:
        return """üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ:

‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –≥–æ—Å—É—Å–ª—É–≥ (90% —É—Å–ª—É–≥ –æ–Ω–ª–∞–π–Ω)
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –∑–µ–ª–µ–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤–∏–∑–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
‚Ä¢ –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"""

    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
    math_match = re.search(r'(\d+[\+\-\*\/]\d+)|(–ø–æ—Å—á–∏—Ç–∞–π|—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç|—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä)\s+(.+)', question)
    if math_match:
        expr = math_match.group(1) or math_match.group(3)
        if expr:
            result = SafeEvaluator.safe_eval(expr)
            if result is not None:
                return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"
            else:
                return "‚ùå –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        from datetime import datetime
        now = datetime.now()
        return f"‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S %d.%m.%Y')}"

    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if any(word in question_lower for word in ['–ø–µ—Ä–µ–≤–µ–¥–∏', 'translat', '–∫–∞–∫ –±—É–¥–µ—Ç', '–ø–µ—Ä–µ–≤–æ–¥']):
        return "üåç –ù–∞–ø–∏—à–∏—Ç–µ: '–ø–µ—Ä–µ–≤–µ–¥–∏ [—Ç–µ–∫—Å—Ç] –Ω–∞ [—è–∑—ã–∫]'\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'"

    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in question_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—á—Ç–æ –∑–Ω–∞—á–∏—Ç']):
        return "üìö –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Ö–∞–π', 'hello', 'hi']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    ai_responses = [
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?",
        "üí° –•–æ—Ä–æ—à–æ, —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
        "üéØ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
        "üöÄ –ü—Ä–∏–Ω—è–ª! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    ]
    
    return random.choice(ai_responses)
async def split_long_message(text, max_length=4000):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        
        # –ò—â–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = text.rfind('. ', 0, max_length)
        if split_pos == -1:
            split_pos = text.rfind(' ', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    
    return parts

def main_menu():
    return ReplyKeyboardMarkup([
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –ó–∞–¥–∞—á–∏"],
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üìã –ü–æ–º–æ—â—å"],
        ["‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
        ["ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ], resize_keyboard=True)

def admin_menu():
    return ReplyKeyboardMarkup([
        ["üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"],
        ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–∞–∑"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def is_admin(user_id):
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    # –ê–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    services = await discover_ai_services()
    if services:
        best_service = max(services.values(), key=lambda x: x['priority'])
        service_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {best_service['name']}"
    else:
        service_status = "‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò"
    
    welcome_text = (
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"{service_status}\n\n"
        f"ü§ñ –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É:\n"
        f"‚Ä¢ –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ üßÆ\n"
        f"‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º üíª\n"
        f"‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üìö\n"
        f"‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu() if user_id != ADMIN_ID else admin_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    logger.info(f"User {user.first_name}: {text}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if text == "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã":
        await status_command(update, context)
        return
    elif text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò":
        await update.message.reply_text("üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É!")
        return
    elif text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        if is_admin(user.id):
            await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        else:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    
    # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
    await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    user_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})"
    ai_response = await ask_ai_assistant(text, user_context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
    message_parts = await split_long_message(ai_response)
    for part in message_parts:
        try:
            await update.message.reply_text(part)
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services = await discover_ai_services()
    
    status_text = "üìä –°—Ç–∞—Ç—É—Å –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤:\n\n"
    for service in sorted(AI_SERVICES, key=lambda x: x['priority'], reverse=True):
        if service['name'] in services:
            status_text += f"‚úÖ {service['name']}: {service['url'] or '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π'}\n"
        else:
            status_text += f"‚ùå {service['name']}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    await update.message.reply_text(status_text)

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç —Å –∞–≤—Ç–æ-–ò–ò –∑–∞–ø—É—â–µ–Ω...")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è!")
        print(f"üë§ ADMIN_ID: {ADMIN_ID}")
        
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
