import os
import logging
import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler, ConversationHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
API_URL = "http://localhost:8000"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
USERNAME, EMAIL, TITLE, DESCRIPTION = range(4)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üìã –ü–æ–º–æ—â—å")],
        [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    keyboard = [
        [KeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")],
        [KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑")],
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_approval_keyboard():
    keyboard = [
        [KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    await update.message.reply_text(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Cloud System!*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await update.message.reply_text(
        "üõ†Ô∏è *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=get_admin_keyboard()
    )

async def handle_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–∞–∑"""
    choice = update.message.text
    
    if choice == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å":
        await update.message.reply_text(
            "‚úÖ *–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!*\n\n"
            "–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.",
            parse_mode='Markdown',
            reply_markup=get_admin_keyboard()
        )
    elif choice == "‚ùå –û—Ç–∫–∞–∑":
        await update.message.reply_text(
            "‚ùå *–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!*\n\n"
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode='Markdown',
            reply_markup=get_admin_keyboard()
        )

    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    message_lower = message.lower()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if any(word in message_lower for word in ['–º–µ–Ω—é', '–≥–ª–∞–≤–Ω–æ–µ', '–¥–æ–º–æ–π', '–Ω–∞—á–∞—Ç—å']):
        await update.message.reply_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    elif any(word in message_lower for word in ['–∞–¥–º–∏–Ω', 'admin', '–ø–∞–Ω–µ–ª—å', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']) or 'üõ†Ô∏è' in message:
        await admin_panel(update, context)
        return
    
    # –ö–Ω–æ–ø–∫–∞: üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif 'üë•' in message or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message_lower:
        await update.message.reply_text("üë• –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚úÖ –ó–∞–¥–∞—á–∏  
    elif '‚úÖ' in message or '–∑–∞–¥–∞—á–∏' in message_lower:
        await update.message.reply_text("‚úÖ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    elif 'üìä' in message or '—Å—Ç–∞—Ç—É—Å' in message_lower:
        await update.message.reply_text("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üìã –ü–æ–º–æ—â—å
    elif 'üìã' in message or '–ø–æ–º–æ—â—å' in message_lower:
        await update.message.reply_text("üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–º–æ—â—å...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif '‚ûï —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in message_lower:
        await update.message.reply_text("üë§ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    elif '‚ûï —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' in message_lower:
        await update.message.reply_text("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á–∏...")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
    elif '‚úÖ –ø—Ä–∏–Ω—è—Ç—å' in message_lower or '–ø—Ä–∏–Ω—è—Ç—å' in message_lower:
        await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚ùå –û—Ç–∫–∞–∑  
    elif '‚ùå –æ—Ç–∫–∞–∑' in message_lower or '–æ—Ç–∫–∞–∑' in message_lower:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω! –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif 'üè†' in message or '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message_lower:
        await update.message.reply_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        
        return
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    elif any(word in message_lower for word in ['–∞–¥–º–∏–Ω', 'admin', '–ø–∞–Ω–µ–ª—å', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']):
        await admin_panel(update, context)
        return
    
    # –ö–Ω–æ–ø–∫–∞: üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    elif 'üõ†Ô∏è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' in message_lower or '–∞–¥–º–∏–Ω' in message_lower:
        await admin_panel(update, context)
        return
    
    # –ö–Ω–æ–ø–∫–∞: üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω)
    elif '–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/users")
                if response.status_code == 200:
                    users = response.json()
                    if users:
                        users_list = "\n".join([f"‚Ä¢ üë§ {u.get('username', 'N/A')} ({u.get('email', 'N/A')}) - ID: {u.get('id', 'N/A')}" for u in users])
                        await update.message.reply_text(f"üë• *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω)
    elif '–≤—Å–µ –∑–∞–¥–∞—á–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/todos")
                if response.status_code == 200:
                    todos = response.json()
                    if todos:
                        todos_list = "\n".join([f"‚Ä¢ üìù {t.get('title', 'N/A')} - ID: {t.get('id', 'N/A')}" for t in todos])
                        await update.message.reply_text(f"‚úÖ *–í—Å–µ –∑–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–∞–¥–º–∏–Ω)
    elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                users_response = await client.get(f"{API_URL}/users")
                todos_response = await client.get(f"{API_URL}/todos")
                
                users_count = len(users_response.json()) if users_response.status_code == 200 else 0
                todos_count = len(todos_response.json()) if todos_response.status_code == 200 else 0
                
                await update.message.reply_text(
                    f"üìà *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
                    f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {todos_count}\n"
                    f"‚Ä¢ üè¢ API —Å—Ç–∞—Ç—É—Å: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n"
                    f"‚Ä¢ üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {users_count + todos_count}",
                    parse_mode='Markdown'
                )
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à (–∞–¥–º–∏–Ω)
    elif '–æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à' in message_lower:
        await update.message.reply_text(
            "üîÑ *–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–∞–∑
    elif message in ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–∞–∑"]:
        await handle_approval(update, context)
        return
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    elif '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/users")
                if response.status_code == 200:
                    users = response.json()
                    if users:
                        users_list = "\n".join([f"‚Ä¢ üë§ {u.get('username', 'N/A')} ({u.get('email', 'N/A')})" for u in users[:5]])
                        await update.message.reply_text(f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("üë• –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    elif '–∑–∞–¥–∞—á–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/todos")
                if response.status_code == 200:
                    todos = response.json()
                    if todos:
                        todos_list = "\n".join([f"‚Ä¢ üìù {t.get('title', 'N/A')}" for t in todos[:5]])
                        await update.message.reply_text(f"‚úÖ *–ó–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("‚úÖ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    elif '—Å—Ç–∞—Ç—É—Å' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                users_response = await client.get(f"{API_URL}/users")
                todos_response = await client.get(f"{API_URL}/todos")
                
                users_count = len(users_response.json()) if users_response.status_code == 200 else 0
                todos_count = len(todos_response.json()) if todos_response.status_code == 200 else 0
                
                await update.message.reply_text(
                    f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n\n"
                    f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {todos_count}\n"
                    f"‚Ä¢ üè¢ API: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
                    parse_mode='Markdown'
                )
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    elif '–ø–æ–º–æ—â—å' in message_lower:
        await update.message.reply_text(
            "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ ‚úÖ –ó–∞–¥–∞—á–∏ - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "‚Ä¢ üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!",
            parse_mode='Markdown'
        )
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∑–∞–¥–∞—á...
    # ... (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'",
            reply_markup=get_main_keyboard()
        )

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", handle_message))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç —Å –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–∞–∑ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
