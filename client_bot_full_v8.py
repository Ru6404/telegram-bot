import logging
import sqlite3
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

# --- CallbackData –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
request_cb = CallbackData("request", "action", "client_id")

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    name TEXT,
    username TEXT,
    phone TEXT,
    comment TEXT,
    status TEXT DEFAULT 'new',
    viewed INTEGER DEFAULT 0
)
''')
conn.commit()

# --- /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_keyboard)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É ---
@dp.message_handler(Text("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))
async def leave_request(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# --- –ê–¥–º–∏–Ω: –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
@dp.message_handler(Text("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"))
async def new_requests(message: types.Message):
    cursor.execute('SELECT id, name, username, phone FROM clients WHERE status="new"')
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=admin_keyboard)
        return
    for row in rows:
        client_id = row[0]
        text = f"üì© –ó–∞—è–≤–∫–∞ #{client_id}\n–ò–º—è: {row[1]}\n–¢–µ–ª–µ–≥—Ä–∞–º: @{row[2]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {row[3]}"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=request_cb.new(action="accept", client_id=client_id)),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=request_cb.new(action="decline", client_id=client_id))]
        ])
        await message.answer(text, reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å ---
@dp.callback_query_handler(request_cb.filter())
async def process_request(call: types.CallbackQuery, callback_data: dict):
    client_id = int(callback_data["client_id"])
    action = callback_data["action"]
    if action == "accept":
        cursor.execute('UPDATE clients SET status="accepted" WHERE id=?', (client_id,))
        conn.commit()
        await call.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{client_id} –ø—Ä–∏–Ω—è—Ç–∞")
    elif action == "decline":
        cursor.execute('UPDATE clients SET status="declined" WHERE id=?', (client_id,))
        conn.commit()
        await call.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{client_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await call.answer()  # –£–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message_handler(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def statistics(message: types.Message):
    cursor.execute('SELECT COUNT(*) FROM clients')
    total = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="new"')
    new_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="accepted"')
    accepted_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="declined"')
    declined_count = cursor.fetchone()[0]
    text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
–ù–æ–≤—ã–µ: {new_count}
–ü—Ä–∏–Ω—è—Ç—ã–µ: {accepted_count}
–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: {declined_count}
"""
    await message.answer(text, reply_markup=admin_keyboard)

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö ---
async def notify_admin_new_requests():
    while True:
        cursor.execute('SELECT id, name FROM clients WHERE status="new" AND viewed=0')
        new_requests = cursor.fetchall()
        for req in new_requests:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=request_cb.new(action="accept", client_id=req[0])),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=request_cb.new(action="decline", client_id=req[0]))]
            ])
            await bot.send_message(
                ADMIN_ID,
                f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: #{req[0]} ‚Äî {req[1]}",
                reply_markup=markup
            )
            cursor.execute('UPDATE clients SET viewed=1 WHERE id=?', (req[0],))
            conn.commit()
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(notify_admin_new_requests())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
