import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ env
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

# --- –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
clients_data = [
    {"id": 1, "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"},
    {"id": 2, "name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"},
    {"id": 3, "name": "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤"}
]

requests_data = [
    {"id": 101, "title": "–ó–∞—è–≤–∫–∞ ‚Ññ1"},
    {"id": 102, "title": "–ó–∞—è–≤–∫–∞ ‚Ññ2"},
    {"id": 103, "title": "–ó–∞—è–≤–∫–∞ ‚Ññ3"}
]

stats_data = {
    "–ö–ª–∏–µ–Ω—Ç—ã": 3,
    "–ó–∞—è–≤–∫–∏": 3,
    "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": 2
}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", reply_markup=ReplyKeyboardRemove())

    keyboard = [
        [KeyboardButton("üìã –ö–ª–∏–µ–Ω—Ç—ã"), KeyboardButton("üìù –ó–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:", text)

    if text == "üìã –ö–ª–∏–µ–Ω—Ç—ã":
        msg = "\n".join([f"{c['id']}: {c['name']}" for c in clients_data])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n{msg}")

    elif text == "üìù –ó–∞—è–≤–∫–∏":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–∞–∑–∞—Ç—å
        for r in requests_data:
            kb = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{r['id']}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{r['id']}")]
            ]
            markup = InlineKeyboardMarkup(kb)
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞: {r['title']}", reply_markup=markup)

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        msg = "\n".join([f"{k}: {v}" for k, v in stats_data.items()])
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{msg}")

    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "–ü–æ–º–æ—â—å:\n- üìã –ö–ª–∏–µ–Ω—Ç—ã: —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n- üìù –ó–∞—è–≤–∫–∏: –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–∞–º–∏\n- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç—ã\n- ‚ùì –ü–æ–º–æ—â—å: —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–∞–∑–∞—Ç—å ---
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    print("–ù–∞–∂–∞—Ç callback:", query.data)

    action, req_id = query.data.split("_")
    req_id = int(req_id)

    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    req = next((r for r in requests_data if r['id'] == req_id), None)
    if not req:
        await query.edit_message_text("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚úÖ‚ùå")
        return

    if action == "accept":
        await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ {req['title']} –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    elif action == "reject":
        await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ {req['title']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å
    requests_data.remove(req)

# --- –õ–æ–≥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def log_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ:", update.message.text)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_all_messages))
app.add_handler(CallbackQueryHandler(callback_handler))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
