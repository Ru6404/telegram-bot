import asyncio
import logging
import os
from datetime import datetime, timedelta
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Text

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ------------------
DB_PATH = "bot_database.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            phone TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            message_count INTEGER DEFAULT 0,
            last_message_date TIMESTAMP
        )
        ''')
        await db.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            title TEXT,
            description TEXT,
            status TEXT DEFAULT 'active',
            priority TEXT DEFAULT 'medium',
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        await db.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            product_name TEXT,
            quantity INTEGER,
            price REAL,
            status TEXT DEFAULT 'new',
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        await db.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            message_text TEXT,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        await db.commit()

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
admin_markup = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("–ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å")]
    ],
    resize_keyboard=True
)

client_markup = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å")],
        [KeyboardButton("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")]
    ],
    resize_keyboard=True
)

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ------------------ –•—ç–Ω–¥–ª–µ—Ä—ã ------------------
@dp.message(Text(equals="/start"))
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_markup)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=client_markup)

# ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ------------------
@dp.message(Text(equals=["üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"]))
async def leave_request(message: types.Message):
    user = message.from_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO clients (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user.id, user.username, user.first_name, user.last_name)
        )
        await db.commit()
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# ------------------ –ê–¥–º–∏–Ω: –∑–∞—è–≤–∫–∏ ------------------
@dp.message(Text(equals=["üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"]))
async def show_new_requests(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT id, first_name, last_name, username FROM clients ORDER BY registration_date DESC"
        )
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    text = "üìã <b>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for r in rows:
        text += f"#{r[0]} ‚Äî {r[1]} {r[2]}, @{r[3]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: None\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: –ù–µ—Ç\n\n"
    await message.answer(text, parse_mode="HTML")

# ------------------ –ê–¥–º–∏–Ω: –∫–ª–∏–µ–Ω—Ç—ã ------------------
@dp.message(Text(equals=["–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"]))
async def add_client(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:")
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@dp.message(Text(equals=["–ü—Ä–∏–Ω—è—Ç—å"]))
async def accept_request(message: types.Message):
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")

@dp.message(Text(equals=["–û—Ç–∫–∞–∑–∞—Ç—å"]))
async def reject_request(message: types.Message):
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

# ------------------ –†–∞—Å—Å—ã–ª–∫–∞ ------------------
@dp.message(Text(equals=["üì® –†–∞—Å—Å—ã–ª–∫–∞"]))
async def broadcast_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def broadcast_send(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = message.text
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id FROM clients WHERE user_id != ?", (ADMIN_ID,))
        clients = await cursor.fetchall()
    for c in clients:
        try:
            await bot.send_message(c[0], f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>\n{text}", parse_mode="HTML")
        except:
            pass
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=admin_markup)

# ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
async def main():
    await init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
