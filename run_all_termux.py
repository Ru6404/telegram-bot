import os
import asyncio
import nest_asyncio
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ------------------ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Termux / Jupyter / asyncio ------------------
nest_asyncio.apply()

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

app_fastapi = FastAPI()
clients_db = [{"id":1,"name":"–ò–≤–∞–Ω"}, {"id":2,"name":"–ú–∞—Ä–∏—è"}]

# ------------------ Endpoints —Å–∞–π—Ç–∞ ------------------
@app_fastapi.get("/api/clients")
async def get_clients():
    return JSONResponse(content=clients_db)

@app_fastapi.get("/")
async def home():
    return {"message": "Hello World"}

# ------------------ Telegram –±–æ—Ç ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë§ –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data="reject")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "clients":
        await query.edit_message_text(f"üìã –ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join([c["name"] for c in clients_db]))
    elif query.data == "stats":
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è")
    elif query.data == "accept":
        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É")
    elif query.data == "reject":
        await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É")

async def start_bot():
    app_bot = ApplicationBuilder().token(TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app_bot.run_polling()

# ------------------ –ó–∞–ø—É—Å–∫ FastAPI + –ë–æ—Ç–∞ ------------------
async def main():
    import uvicorn
    config = uvicorn.Config(app_fastapi, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    asyncio.create_task(server.serve())  # FastAPI —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    await start_bot()  # –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())

