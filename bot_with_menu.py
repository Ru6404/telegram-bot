import os
import logging
import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
API_URL = "http://localhost:8000"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üìã –ü–æ–º–æ—â—å")],
        [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    await update.message.reply_text(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Cloud System!*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    message_lower = message.lower()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', 'start', '–Ω–∞—á–∞—Ç—å']):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Auto-Cloud —Å–∏—Å—Ç–µ–º–æ–π!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ö–Ω–æ–ø–∫–∞: üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/users")
                if response.status_code == 200:
                    users = response.json()
                    if users:
                        users_list = "\n".join([f"‚Ä¢ üë§ {u.get('username', 'N/A')} ({u.get('email', 'N/A')})" for u in users[:10]])
                        await update.message.reply_text(f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("üë• –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚úÖ –ó–∞–¥–∞—á–∏
    elif '–∑–∞–¥–∞—á–∏' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/todos")
                if response.status_code == 200:
                    todos = response.json()
                    if todos:
                        todos_list = "\n".join([f"‚Ä¢ üìù {t.get('title', 'N/A')}" for t in todos[:10]])
                        await update.message.reply_text(f"‚úÖ *–ó–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}", parse_mode='Markdown')
                    else:
                        await update.message.reply_text("‚úÖ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ.")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    elif '—Å—Ç–∞—Ç—É—Å' in message_lower or '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in message_lower:
        try:
            async with httpx.AsyncClient() as client:
                users_response = await client.get(f"{API_URL}/users")
                todos_response = await client.get(f"{API_URL}/todos")
                
                users_count = len(users_response.json()) if users_response.status_code == 200 else 0
                todos_count = len(todos_response.json()) if todos_response.status_code == 200 else 0
                
                await update.message.reply_text(
                    f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n\n"
                    f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"‚Ä¢ ‚úÖ –ó–∞–¥–∞—á: {todos_count}\n"
                    f"‚Ä¢ üè¢ API: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
                    parse_mode='Markdown'
                )
        except Exception as e:
            await update.message.reply_text("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    # –ö–Ω–æ–ø–∫–∞: üìã –ü–æ–º–æ—â—å
    elif '–ø–æ–º–æ—â—å' in message_lower or '–∫–æ–º–∞–Ω–¥—ã' in message_lower:
        await update.message.reply_text(
            "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ ‚úÖ –ó–∞–¥–∞—á–∏ - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n"
            "üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            parse_mode='Markdown'
        )
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif '—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in message_lower and not message_lower.startswith('–∫–∞–∫'):
        await update.message.reply_text(
            "üë§ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "`–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ò–≤–∞–Ω, ivan@mail.ru`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ê–ª–µ–∫—Å–µ–π, alex@company.com`",
            parse_mode='Markdown'
        )
        return
    
    # –ö–Ω–æ–ø–∫–∞: ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    elif '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' in message_lower and not message_lower.startswith('–∫–∞–∫'):
        await update.message.reply_text(
            "‚úÖ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "`–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –ó–∞–≥–æ–ª–æ–≤–æ–∫, –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API, –°–æ–∑–¥–∞—Ç—å REST API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã`",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
    elif '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:' in message_lower:
        try:
            parts = message.split(':', 1)[1].strip().split(',')
            if len(parts) >= 2:
                username = parts[0].strip()
                email = parts[1].strip()
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(f"{API_URL}/users", json={
                        "username": username,
                        "email": email
                    })
                    
                    if response.status_code == 200:
                        user = response.json()
                        await update.message.reply_text(
                            f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n"
                            f"üë§ –ò–º—è: {user.get('username', 'N/A')}\n"
                            f"üìß Email: {user.get('email', 'N/A')}\n"
                            f"üÜî ID: {user.get('id', 'N/A')}",
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ò–≤–∞–Ω, ivan@mail.ru`")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
    elif '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:' in message_lower:
        try:
            parts = message.split(':', 1)[1].strip().split(',')
            if len(parts) >= 2:
                title = parts[0].strip()
                description = parts[1].strip()
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(f"{API_URL}/todos", json={
                        "title": title,
                        "description": description
                    })
                    
                    if response.status_code == 200:
                        todo = response.json()
                        await update.message.reply_text(
                            f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {todo.get('title', 'N/A')}\n"
                            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {todo.get('description', 'N/A')}\n"
                            f"üÜî ID: {todo.get('id', 'N/A')}",
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –ó–∞–≥–æ–ª–æ–≤–æ–∫, –û–ø–∏—Å–∞–Ω–∏–µ`")
        return
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'",
            reply_markup=get_main_keyboard()
        )

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", handle_message))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç —Å –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
