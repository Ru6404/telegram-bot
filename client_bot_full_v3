import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 5569793273  # –í–∞—à Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞ ---
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    name TEXT,
    username TEXT,
    phone TEXT,
    comment TEXT,
    viewed INTEGER DEFAULT 0
)
''')
conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        user_menu = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
                [KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è")]
            ],
            resize_keyboard=True
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_menu)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(lambda message: message.from_user.id == ADMIN_ID)
async def admin_panel(message: types.Message):
    text = message.text
    if text == "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏":
        cursor.execute("SELECT id, name, username, comment FROM clients WHERE viewed=0")
        rows = cursor.fetchall()
        if not rows:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            msg = ""
            for r in rows:
                msg += f"#{r[0]} ‚Äî {r[1]}, @{r[2]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {r[3]}\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: –ù–µ—Ç\n\n"
            await message.answer(msg)

    elif text == "üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏":
        cursor.execute("SELECT id, name, username, comment, viewed FROM clients")
        rows = cursor.fetchall()
        msg = ""
        for r in rows:
            status = "–î–∞" if r[4] else "–ù–µ—Ç"
            msg += f"#{r[0]} ‚Äî {r[1]}, @{r[2]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {r[3]}\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {status}\n\n"
        await message.answer(msg)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:")
        dp.register_message_handler(add_client_name, state=None)

    elif text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:")
        dp.register_message_handler(accept_request, state=None)

    elif text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        dp.register_message_handler(reject_request, state=None)

    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        dp.register_message_handler(delete_request, state=None)

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        cursor.execute("SELECT COUNT(*) FROM clients WHERE viewed=0")
        new_requests = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM clients WHERE viewed=1")
        processed = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM clients")
        total = cursor.fetchone()[0]
        msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {new_requests}\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}"
        await message.answer(msg)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
async def add_client_name(message: types.Message):
    name = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–ª–∏–µ–Ω—Ç–∞:")
    dp.register_message_handler(lambda m: add_client_telegram_id(m, name), state=None)

async def add_client_telegram_id(message: types.Message, name):
    telegram_id = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:")
    dp.register_message_handler(lambda m: add_client_phone(m, name, telegram_id), state=None)

async def add_client_phone(message: types.Message, name, telegram_id):
    phone = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):")
    dp.register_message_handler(lambda m: add_client_comment(m, name, telegram_id, phone), state=None)

async def add_client_comment(message: types.Message, name, telegram_id, phone):
    comment = message.text
    cursor.execute("INSERT INTO clients (telegram_id, name, phone, comment) VALUES (?, ?, ?, ?)",
                   (telegram_id, name, phone, comment))
    conn.commit()
    await message.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω!")

# --- –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É ---
async def accept_request(message: types.Message):
    request_id = int(message.text)
    cursor.execute("SELECT telegram_id, name FROM clients WHERE id=?", (request_id,))
    result = cursor.fetchone()
    if result:
        telegram_id, name = result
        cursor.execute("UPDATE clients SET viewed=1 WHERE id=?", (request_id,))
        conn.commit()
        await bot.send_message(telegram_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, {name}!")
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞.")
    else:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ---
async def reject_request(message: types.Message):
    request_id = int(message.text)
    cursor.execute("SELECT telegram_id, name FROM clients WHERE id=?", (request_id,))
    result = cursor.fetchone()
    if result:
        telegram_id, name = result
        cursor.execute("DELETE FROM clients WHERE id=?", (request_id,))
        conn.commit()
        await bot.send_message(telegram_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, {name}.")
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    else:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É ---
async def delete_request(message: types.Message):
    request_id = int(message.text)
    cursor.execute("DELETE FROM clients WHERE id=?", (request_id,))
    conn.commit()
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@dp.message_handler(lambda message: message.from_user.id != ADMIN_ID)
async def client_panel(message: types.Message):
    if message.text == "üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        dp.register_message_handler(save_name, state=None)
    elif message.text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await message.answer("–ú—ã –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ üöÄ")
    elif message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è":
        await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +82-10-1234-5678")

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
async def save_name(message: types.Message):
    name = message.text
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    dp.register_message_handler(lambda m: save_phone(m, name, telegram_id, username), state=None)

async def save_phone(message, name, telegram_id, username):
    phone = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):")
    dp.register_message_handler(lambda m: save_comment(m, name, telegram_id, username, phone), state=None)

async def save_comment(message, name, telegram_id, username, phone):
    comment = message.text
    cursor.execute("INSERT INTO clients (telegram_id, name, username, phone, comment) VALUES (?, ?, ?, ?, ?)",
                   (telegram_id, name, username, phone, comment))
    conn.commit()
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
    cursor.execute("SELECT id FROM clients ORDER BY id DESC LIMIT 1")
    client_id = cursor.fetchone()[0]
    msg_admin = f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\nID: {client_id}\n–ò–º—è: {name}\nUsername: @{username}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    await bot.send_message(ADMIN_ID, msg_admin)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
