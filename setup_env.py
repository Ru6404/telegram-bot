import os
import platform
import subprocess
import sys
import shutil


def run(cmd, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell"""
    print(f"‚ö° –ó–∞–ø—É—Å–∫: {cmd}")
    subprocess.run(cmd, shell=True, check=check)


def ensure_rust():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Rust –¥–ª—è pydantic-core"""
    if shutil.which("cargo") is None:
        print("ü¶Ä Rust –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        if platform.system() == "Windows":
            run("powershell -Command \"Invoke-WebRequest https://win.rustup.rs -UseBasicParsing -OutFile rustup-init.exe; Start-Process rustup-init.exe -ArgumentList '-y' -Wait\"")
        else:
            run("curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y")
            rust_env = os.path.expanduser("~/.cargo/env")
            if os.path.exists(rust_env):
                print("üîß –ü–æ–¥–∫–ª—é—á–∞—é Rust –≤ PATH")
                run(f"source {rust_env}", check=False)
    else:
        print("‚úÖ Rust —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def install_system_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    os_name = platform.system()
    print(f"üñ•Ô∏è –û–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {os_name}")

    if os_name == "Linux":
        if shutil.which("apt-get"):
            run("sudo apt-get update")
            run("sudo apt-get install -y build-essential python3-dev curl pkg-config libffi-dev")
        elif shutil.which("yum"):
            run("sudo yum groupinstall -y 'Development Tools'")
            run("sudo yum install -y python3-devel curl libffi-devel")
    elif os_name == "Darwin":  # macOS
        run("xcode-select --install || true", check=False)
        if shutil.which("brew"):
            run("brew install libffi || true")
    elif os_name == "Windows":
        print("ü™ü Windows: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
    else:
        print("‚ö†Ô∏è –û–° –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞")


def main():
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è pydantic-core –∏ uvloop")

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º pip, setuptools, wheel
    run(f"{sys.executable} -m pip install --upgrade pip setuptools wheel")

    # 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_system_deps()

    # 3. Rust
    ensure_rust()

    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    os_name = platform.system()
    try:
        if os_name == "Windows":
            print("ü™ü –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–æ–ª—å–∫–æ pydantic-core (uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Windows)")
            run(f"{sys.executable} -m pip install --only-binary=:all: pydantic-core")
        else:
            run(f"{sys.executable} -m pip install --only-binary=:all: pydantic-core uvloop")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫–∏, –ø—Ä–æ–±—É—é –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤...")
        if os_name == "Windows":
            run(f"{sys.executable} -m pip install pydantic-core")
        else:
            run(f"{sys.executable} -m pip install pydantic-core uvloop")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞
    try:
        import pydantic_core
        print(f"‚úÖ pydantic-core {pydantic_core.__version__}")
        if os_name != "Windows":
            import uvloop
            print(f"‚úÖ uvloop {uvloop.__version__}")
        else:
            print("‚ÑπÔ∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Windows")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", e)


if __name__ == "__main__":
    main()
