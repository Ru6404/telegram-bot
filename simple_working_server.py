from fastapi import FastAPI
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn
import socket
import time

app = FastAPI(title="Quantum Working System")

# –ü—Ä–æ—Å—Ç–æ–π HTML –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum System üöÄ</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0; padding: 20px; color: white; min-height: 100vh;
        }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { text-align: center; padding: 2rem; }
        .logo { font-size: 3rem; }
        .title { font-size: 2rem; margin: 1rem 0; }
        
        .grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 1rem; 
            margin: 2rem 0; 
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .card h3 { margin-top: 0; }
        .status { color: #4ade80; font-weight: bold; }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">‚ö°</div>
            <h1 class="title">Quantum System 2025</h1>
            <p>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É: <span class="status" id="port">8080</span></p>
        </div>
        
        <div class="grid">
            <div class="card">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <p>‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <span class="status">online</span></p>
                <p>‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ <span class="status">online</span></p>
                <p>‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ <span class="status">offline</span></p>
            </div>
            
            <div class="card">
                <h3>üìã –ó–∞–¥–∞—á–∏</h3>
                <p>‚Ä¢ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã <span class="status">completed</span></p>
                <p>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram <span class="status">in progress</span></p>
                <p>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API <span class="status">pending</span></p>
            </div>
            
            <div class="card">
                <h3>üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                <p>‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (PDF, 2.5MB)</p>
                <p>‚Ä¢ API —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ (MD, 1.2MB)</p>
                <p>‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (DOC, 3.1MB)</p>
            </div>
            
            <div class="card">
                <h3>üåê API –°—Ç–∞—Ç—É—Å</h3>
                <p><span class="status">Online</span> - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                <p>–í–µ—Ä—Å–∏—è: 2025.1.0</p>
                <div>
                    <a href="/health" class="btn">–°—Ç–∞—Ç—É—Å API</a>
                    <a href="/api" class="btn">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</a>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        fetch('/health')
            .then(r => r.json())
            .then(data => {
                document.getElementById('port').textContent = data.port;
            });
    </script>
</body>
</html>
"""

@app.get("/", response_class=HTMLResponse)
async def root():
    return HTMLResponse(HTML)

@app.get("/health")
async def health():
    return JSONResponse({
        "status": "healthy", 
        "version": "2025.1.0", 
        "timestamp": time.time(),
        "port": port,
        "message": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!"
    })

@app.get("/api")
async def api_info():
    return JSONResponse({
        "endpoints": {
            "/": "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
            "/health": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", 
            "/api": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è API",
            "/users": "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "/tasks": "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        },
        "status": "active",
        "port": port
    })

@app.get("/users")
async def get_users():
    return JSONResponse([
        {"id": 1, "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "status": "online"},
        {"id": 2, "name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "status": "online"},
        {"id": 3, "name": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "status": "offline"}
    ])

@app.get("/tasks") 
async def get_tasks():
    return JSONResponse([
        {"id": 1, "title": "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã", "status": "completed"},
        {"id": 2, "title": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram", "status": "in_progress"},
        {"id": 3, "title": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API", "status": "pending"}
    ])

def find_free_port():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç"""
    for port in [8080, 3000, 5000, 8000, 9000]:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except:
            continue
    return 8080  # fallback

port = find_free_port()

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{port}")
    print(f"üìä –°—Ç–∞—Ç—É—Å: http://localhost:{port}/health")
    
    uvicorn.run(app, host="0.0.0.0", port=port)
