import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

import os

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    name TEXT,
    username TEXT,
    phone TEXT,
    comment TEXT,
    status TEXT DEFAULT 'new',
    viewed INTEGER DEFAULT 0
)
''')
conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_keyboard)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É ---
@dp.message_handler(Text("üìå –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))
async def leave_request(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await dp.current_state(user=message.from_user.id).set_state("name_state")

@dp.message_handler(state="name_state")
async def get_name(message: types.Message):
    dp.current_state(user=message.from_user.id).update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await dp.current_state(user=message.from_user.id).set_state("phone_state")

@dp.message_handler(state="phone_state")
async def get_phone(message: types.Message):
    dp.current_state(user=message.from_user.id).update_data(phone=message.text)
    data = await dp.current_state(user=message.from_user.id).get_data()
    cursor.execute('''
    INSERT INTO clients (telegram_id, name, username, phone)
    VALUES (?, ?, ?, ?)
    ''', (message.from_user.id, data["name"], message.from_user.username, data["phone"]))
    conn.commit()
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply_markup=user_keyboard)
    await dp.current_state(user=message.from_user.id).reset_state()

# --- –ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ---
@dp.message_handler(Text("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"))
async def new_requests(message: types.Message):
    cursor.execute('SELECT id, name, username, phone, status FROM clients WHERE status="new"')
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=admin_keyboard)
        return
    text = "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for row in rows:
        text += f"#{row[0]} ‚Äî {row[1]}, @{row[2]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {row[3]}\n–°—Ç–∞—Ç—É—Å: {row[4]}\n\n"
    await message.answer(text, reply_markup=admin_keyboard)

# --- –ê–¥–º–∏–Ω: –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É ---
@dp.message_handler(Text("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"))
async def accept_request(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:")

@dp.message_handler(lambda m: m.text.isdigit())
async def process_accept(message: types.Message):
    client_id = int(message.text)
    cursor.execute('UPDATE clients SET status="accepted", viewed=1 WHERE id=?', (client_id,))
    conn.commit()
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{client_id} –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", reply_markup=admin_keyboard)

# --- –ê–¥–º–∏–Ω: –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ---
@dp.message_handler(Text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"))
async def decline_request(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")

@dp.message_handler(lambda m: m.text.isdigit())
async def process_decline(message: types.Message):
    client_id = int(message.text)
    cursor.execute('UPDATE clients SET status="declined", viewed=1 WHERE id=?', (client_id,))
    conn.commit()
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{client_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", reply_markup=admin_keyboard)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message_handler(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def statistics(message: types.Message):
    cursor.execute('SELECT COUNT(*) FROM clients')
    total = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="new"')
    new_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="accepted"')
    accepted_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM clients WHERE status="declined"')
    declined_count = cursor.fetchone()[0]
    text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
–ù–æ–≤—ã–µ: {new_count}
–ü—Ä–∏–Ω—è—Ç—ã–µ: {accepted_count}
–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: {declined_count}
"""
    await message.answer(text, reply_markup=admin_keyboard)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
