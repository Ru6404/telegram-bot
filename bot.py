import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
    
    async def process_message(self, message: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        message_lower = message.lower().strip()
        
        # 1. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢
        if any(op in message for op in ['+', '-', '*', '/', '√ó', '√∑']) and any(c.isdigit() for c in message):
            try:
                # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
                clean_msg = message.lower()
                for word in ['–ø–æ—Å—á–∏—Ç–∞–π', '–≤—ã—á–∏—Å–ª–∏', '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç', '—Ä–µ—à–∏']:
                    clean_msg = clean_msg.replace(word, '')
                clean_msg = clean_msg.strip()
                
                # –£–°–ò–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                safe_chars = '0123456789+-*/(). '
                forbidden_words = ['import', 'exec', 'open', 'sys', 'os', '__']
                
                if (all(c in safe_chars for c in clean_msg) and 
                    not any(word in clean_msg for word in forbidden_words)):
                    result = eval(clean_msg)
                    return f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {clean_msg} = {result}"
                else:
                    return "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            except ZeroDivisionError:
                return "‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
            except:
                return "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
        
        # 2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–Ω–∞—á–∞—Ç—å', 'start']):
            return "–ü—Ä–∏–≤–µ—Ç! üòä –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        # 3. –Ø–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        elif any(word in message_lower for word in ['–ø–æ—Å—á–∏—Ç–∞–π', '–≤—ã—á–∏—Å–ª–∏', '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç', '—Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä']):
            return "–ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2 –∏–ª–∏ 10*5"
        
        # 4. –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        elif any(word in message_lower for word in ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '–∫–æ–º–∞–Ω–¥—ã', 'help', '–ø–æ–º–æ—â—å']):
            return "ü§ñ –Ø —É–º–µ—é: —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã (2+2), –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Ä–µ–º—è, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!"
        
        # 5. –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ
        elif any(word in message_lower for word in ['–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', '—Ç–≤–æ–µ –∏–º—è', '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç']):
            return "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫! ü§ñ –°–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á."
        
        # 6. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thank you']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!"
        
        # 7. –ü—Ä–æ—â–∞–Ω–∏—è
        elif any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'goodbye', 'see you', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏']):
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã"
        
        # 8. –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
        elif any(word in message_lower for word in ['–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏', '–∫–∞–∫–æ–µ —á–∏—Å–ª–æ']):
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%d.%m.%Y")
            return f"üïê –í—Ä–µ–º—è: {current_time}\nüìÖ –î–∞—Ç–∞: {current_date}"
        
        # 9. –ö–∞–∫ –¥–µ–ª–∞
        elif '–∫–∞–∫ –¥–µ–ª–∞' in message_lower:
            return "–û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é. üòä –ê —É –≤–∞—Å?"
        
        # 10. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å
        elif '—á—Ç–æ –¥–µ–ª–∞–µ—à—å' in message_lower:
            return "–ü–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üíª"
        
        # 11. –ü–æ–≥–æ–¥–∞
        elif any(word in message_lower for word in ['–ø–æ–≥–æ–¥–∞', 'weather']):
            return "üå§Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # 12. –®—É—Ç–∫–∏
        elif any(word in message_lower for word in ['—à—É—Ç–∫–∞', '–∞–Ω–µ–∫–¥–æ—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É']):
            return "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Ç–∞–∫ –ø–ª–æ—Ö–æ —Ç–∞–Ω—Ü—É—é—Ç? –£ –Ω–∏—Ö –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞! üíÉ"
        
        # 13. –í–æ–ø—Ä–æ—Å—ã
        elif message_lower.endswith('?'):
            if '–∫–∞–∫' in message_lower:
                return "–ù–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å ü§î"
            elif '–ø–æ—á–µ–º—É' in message_lower:
                return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å üòä"
            else:
                return "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–æ–ø—Ä–æ—Å–∞. –°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø—Ä–æ—â–µ!"
        
        # 14. –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif len(message) < 3:
            return "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
        
        # 15. –°–æ–æ–±—â–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏
        elif any(c.isdigit() for c in message):
            return "–í–∏–∂—É —á–∏—Å–ª–∞! –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Å +, -, *, /"
        
        # 16. –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï
        else:
            return "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä? ü§ñ"

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = TelegramBot()
    asyncio.run(bot.start_bot())
