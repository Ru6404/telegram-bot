import logging
import sqlite3
import os
from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import Updater, CommandHandler

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º .env
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

bot = Bot(token=TOKEN)
updater = Updater(token=TOKEN)

def start(update, context):
    update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

updater.dispatcher.add_handler(CommandHandler("start", start))

updater.start_polling()
updater.idle()

from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 5569793273

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_keys = [
    ['üìä –í—Å–µ –∑–∞–¥–∞—á–∏', 'üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã'],
    ['üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã', 'üì® –†–∞—Å—Å—ã–ª–∫–∞'],
    ['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]
admin_markup = ReplyKeyboardMarkup(admin_keys, resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_MESSAGE = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS clients (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        message_count INTEGER DEFAULT 0,
        last_message_date TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id INTEGER,
        title TEXT,
        description TEXT,
        status TEXT DEFAULT 'active',
        priority TEXT DEFAULT 'medium',
        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id INTEGER,
        product_name TEXT,
        quantity INTEGER,
        price REAL,
        status TEXT DEFAULT 'new',
        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id INTEGER,
        message_text TEXT,
        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def add_test_data():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    test_clients = [
        (1001, 'ivanov', '–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤', '+79111111111', 3),
        (1002, 'maria', '–ú–∞—Ä–∏—è', '–ü–µ—Ç—Ä–æ–≤–∞', '+79222222222', 0),
        (1003, 'alexey', '–ê–ª–µ–∫—Å–µ–π', '–°–∏–¥–æ—Ä–æ–≤', '+79333333333', 0)
    ]
    
    for client in test_clients:
        try:
            cursor.execute('''
            INSERT OR IGNORE INTO clients (user_id, username, first_name, last_name, phone, message_count)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', client)
        except:
            pass
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [
        (1001, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞', '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞', 'new', 'high'),
        (1001, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SEO', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º', 'new', 'medium'),
        (1001, '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É', 'new', 'low')
    ]
    
    for task in tasks:
        cursor.execute('''
        INSERT INTO tasks (client_id, title, description, status, priority)
        VALUES (?, ?, ?, ?, ?)
        ''', task)
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = update.effective_user
    
    if user_id == ADMIN_ID:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM clients')
        total_clients = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM tasks WHERE status = "active"')
        active_tasks = cursor.fetchone()[0]
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        twenty_four_hours_ago = datetime.now() - timedelta(hours=24)
        cursor.execute('SELECT COUNT(*) FROM messages WHERE created_date > ?', (twenty_four_hours_ago,))
        recent_messages = cursor.fetchone()[0]
        
        conn.close()
        
        message = f"""
üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (24—á): {recent_messages}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=admin_markup)
    else:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async def show_all_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT c.id, c.first_name, c.last_name, 
           COUNT(t.id) as task_count, 
           c.message_count
    FROM clients c
    LEFT JOIN tasks t ON c.id = t.client_id AND t.status = "active"
    GROUP BY c.id
    ''')
    
    clients = cursor.fetchall()
    conn.close()
    
    message = "üë• <b>–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n"
    
    for client in clients:
        message += f"‚Ä¢ ID: {client[0]}\n"
        message += f"  üë§ {client[1]} {client[2]}\n"
        message += f"  üìã –ó–∞–¥–∞—á: {client[3]}\n"
        message += f"  üìß –°–æ–æ–±—â–µ–Ω–∏–π: {client[4]}\n\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
async def show_all_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT t.id, t.title, c.first_name, c.last_name, t.status, t.priority
    FROM tasks t
    JOIN clients c ON t.client_id = c.id
    WHERE t.status = "active"
    ORDER BY t.created_date DESC
    ''')
    
    tasks = cursor.fetchall()
    conn.close()
    
    if not tasks:
        await update.message.reply_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    message = "üìä <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    for task in tasks:
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_emoji = "‚ö° –≤—ã—Å–æ–∫–∏–π" if task[5] == "high" else "üî∂ —Å—Ä–µ–¥–Ω–∏–π" if task[5] == "medium" else "üîª –Ω–∏–∑–∫–∏–π"
        status_emoji = "üü¢ –Ω–æ–≤—ã–π" if task[4] == "new" else "üü° –≤ —Ä–∞–±–æ—Ç–µ" if task[4] == "in_progress" else "üî¥ –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        message += f"‚Ä¢ #{task[0]}: {task[1]}\n"
        message += f"  üë§ {task[2]} {task[3]}\n"
        message += f"  {status_emoji} | {priority_emoji}\n\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
async def show_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT o.id, c.first_name, c.last_name, o.product_name, o.quantity, o.price, o.status
    FROM orders o
    JOIN clients c ON o.client_id = c.id
    ORDER BY o.created_date DESC
    ''')
    
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        message = "üì¶ <b>–í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."
    else:
        message = "üì¶ <b>–í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            message += f"‚Ä¢ –ó–∞–∫–∞–∑ #{order[0]}: {order[3]}\n"
            message += f"  üë§ {order[1]} {order[2]}\n"
            message += f"  üì¶ {order[4]} —à—Ç. √ó {order[5]} —Ä—É–±.\n"
            message += f"  üö¶ –°—Ç–∞—Ç—É—Å: {order[6]}\n\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM clients')
    total_clients = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE status = "active"')
    active_tasks = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM tasks')
    total_tasks = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM orders')
    total_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(price * quantity) FROM orders')
    total_revenue = cursor.fetchone()[0] or 0
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    twenty_four_hours_ago = datetime.now() - timedelta(hours=24)
    cursor.execute('SELECT COUNT(*) FROM messages WHERE created_date > ?', (twenty_four_hours_ago,))
    recent_messages = cursor.fetchone()[0]
    
    conn.close()
    
    message = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë• <b>–ö–ª–∏–µ–Ω—Ç—ã:</b> {total_clients}
üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b> {active_tasks}
üìù <b>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</b> {total_tasks}
üì¶ <b>–ó–∞–∫–∞–∑—ã:</b> {total_orders}
üí∞ <b>–í—ã—Ä—É—á–∫–∞:</b> {total_revenue} —Ä—É–±.
üì® <b>–°–æ–æ–±—â–µ–Ω–∏—è (24—á):</b> {recent_messages}
    """
    
    await update.message.reply_text(message, parse_mode='HTML')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>

‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
‚Ä¢ üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
‚Ä¢ üë• –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
/set_notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/set_templates - —à–∞–±–ª–æ–Ω—ã
/db_backup - backup –±–∞–∑—ã
    """
    
    await update.message.reply_text(message, parse_mode='HTML')

# –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return BROADCAST_MESSAGE

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT user_id FROM clients WHERE user_id != ?', (ADMIN_ID,))
    clients = cursor.fetchall()
    conn.close()
    
    total_clients = len(clients)
    successful = 0
    failed = 0
    
    await update.message.reply_text(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    for client in clients:
        try:
            await context.bot.send_message(
                chat_id=client[0],
                text=f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message_text}",
                parse_mode='HTML'
            )
            successful += 1
        except:
            failed += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=admin_markup
    )
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=admin_markup
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id == ADMIN_ID:
        if text == 'üìä –í—Å–µ –∑–∞–¥–∞—á–∏':
            await show_all_tasks(update, context)
        elif text == 'üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã':
            await show_all_clients(update, context)
        elif text == 'üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã':
            await show_all_orders(update, context)
        elif text == 'üì® –†–∞—Å—Å—ã–ª–∫–∞':
            await start_broadcast(update, context)
            return BROADCAST_MESSAGE
        elif text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await show_statistics(update, context)
        elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await show_settings(update, context)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=admin_markup)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute('SELECT id FROM clients WHERE user_id = ?', (user_id,))
        client_result = cursor.fetchone()
        
        if client_result:
            client_id = client_result[0]
            cursor.execute('''
            INSERT INTO messages (client_id, message_text)
            VALUES (?, ?)
            ''', (client_id, text))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
            UPDATE clients 
            SET message_count = message_count + 1, last_message_date = CURRENT_TIMESTAMP
            WHERE id = ?
            ''', (client_id,))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    add_test_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(['üì® –†–∞—Å—Å—ã–ª–∫–∞']), start_broadcast)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.Command(), send_broadcast)]
        },
        fallbacks=[CommandHandler("cancel", cancel_broadcast)]
    )
    
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.Command(), handle_text))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
