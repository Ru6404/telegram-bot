import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://127.0.0.1:8080"

if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

app = ApplicationBuilder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients")],
        [InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏", callback_data="requests")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", reply_markup=InlineKeyboardMarkup(keyboard))

def format_request(r):
    status = r.get("status","new")
    title = r["title"]
    if status == "accepted": return f"üü¢ {r['id']}: {title} [–ü—Ä–∏–Ω—è—Ç–æ]"
    if status == "rejected": return f"üî¥ {r['id']}: {title} [–û—Ç–∫–ª–æ–Ω–µ–Ω–æ]"
    return f"üîµ {r['id']}: {title} [–ù–æ–≤–∞—è]"

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        if query.data == "clients":
            res = requests.get(f"{API_URL}/api/clients").json()
            text = "üìã –ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join([f"{c['id']}: {c['name']}" for c in res])
            await query.edit_message_text(text=text)

        elif query.data == "requests":
            res = requests.get(f"{API_URL}/api/requests").json()
            keyboard = []
            text_lines = []
            for r in res:
                text_lines.append(format_request(r))
                if r.get("status","new")=="new":
                    buttons = [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{r['id']}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{r['id']}")
                    ]
                    keyboard.append(buttons)
            await query.edit_message_text(text="üìù –ó–∞—è–≤–∫–∏:\n" + "\n".join(text_lines),
                                          reply_markup=InlineKeyboardMarkup(keyboard if keyboard else None))

        elif query.data == "stats":
            res = requests.get(f"{API_URL}/api/stats").json()
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join([f"{k}: {v}" for k,v in res.items()])
            await query.edit_message_text(text=text)

        elif query.data.startswith("accept_") or query.data.startswith("reject_"):
            parts = query.data.split("_")
            action = "accepted" if parts[0]=="accept" else "rejected"
            req_id = int(parts[1])
            requests.post(f"{API_URL}/api/request/{req_id}/action", data={"action": action})
            res = requests.get(f"{API_URL}/api/requests").json()
            keyboard = []
            text_lines = []
            for r in res:
                text_lines.append(format_request(r))
                if r.get("status","new")=="new":
                    buttons = [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{r['id']}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{r['id']}")
                    ]
                    keyboard.append(buttons)
            await query.edit_message_text(text="üìù –ó–∞—è–≤–∫–∏:\n" + "\n".join(text_lines),
                                          reply_markup=InlineKeyboardMarkup(keyboard if keyboard else None))
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()

