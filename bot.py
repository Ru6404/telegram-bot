import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ run_bot.sh")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏"), KeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å")]
    ],
    resize_keyboard=True
)

# üìå Inline –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞
inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data="decline")]
    ]
)

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É
@dp.message(F.text == "üìã –ó–∞—è–≤–∫–∏")
async def show_requests(message: types.Message):
    await message.answer("üìã –ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", reply_markup=inline_kb)

@dp.message(F.text == "üë• –ö–ª–∏–µ–Ω—Ç—ã")
async def show_clients(message: types.Message):
    await message.answer("üë• –ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    await message.answer("üìä –ó–¥–µ—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
async def accept_from_menu(message: types.Message):
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

@dp.message(F.text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å")
async def decline_from_menu(message: types.Message):
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "accept")
async def accept_request(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ (inline)")
    await callback.answer()

@dp.callback_query(F.data == "decline")
async def decline_request(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (inline)")
    await callback.answer()

# üìå –ó–∞–ø—É—Å–∫
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
import requests
from config import OPENAI_API_KEY

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
def check_internet():
    try:
        requests.get("https://api.openai.com", timeout=3)
        return True
    except:
        return False

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –æ—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç—á–∏–∫ (–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
def offline_answer(text: str) -> str:
    text = text.lower()
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        return "–ü—Ä–∏–≤–µ—Ç üëã –Ø –æ—Ñ–ª–∞–π–Ω-–±–æ—Ç. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ—Ç, –Ω–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Å —Ç–æ–±–æ–π."
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text:
        return "–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! üòä"
    elif "–ø–æ–∫–∞" in text:
        return "–î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã"
    else:
        return "–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—á–∞—é –ø—Ä–æ—â–µ."

# –û–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
def online_answer(text: str) -> str:
    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": text}],
        max_tokens=200,
    )
    return response.choices[0].message.content

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def universal_handler(message: types.Message):
    user_text = message.text
    try:
        if check_internet() and OPENAI_API_KEY:
            reply = online_answer(user_text)
        else:
            reply = offline_answer(user_text)
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

    await message.answer(reply)
