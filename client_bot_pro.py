import logging
import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"
ADMIN_ID = 5569793273

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS clients (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        name TEXT,
        username TEXT,
        phone TEXT,
        email TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY,
        client_id INTEGER,
        title TEXT,
        description TEXT,
        status TEXT DEFAULT '–Ω–æ–≤—ã–π',
        priority TEXT DEFAULT '—Å—Ä–µ–¥–Ω–∏–π',
        assigned_to INTEGER,
        deadline DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id),
        FOREIGN KEY (assigned_to) REFERENCES clients (id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY,
        client_id INTEGER,
        message_text TEXT,
        is_from_client BOOLEAN,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY,
        client_id INTEGER,
        order_number TEXT,
        description TEXT,
        status TEXT DEFAULT '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        amount REAL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES clients (id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –ú–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_MENU = [
    ['üìä –í—Å–µ –∑–∞–¥–∞—á–∏', 'üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã'],
    ['üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã', 'üì® –†–∞—Å—Å—ã–ª–∫–∞'],
    ['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]

CLIENT_MENU = [
    ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
    ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å'],
    ['üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞']
]

admin_markup = ReplyKeyboardMarkup(ADMIN_MENU, resize_keyboard=True)
client_markup = ReplyKeyboardMarkup(CLIENT_MENU, resize_keyboard=True)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================== #

def get_db_connection():
    return sqlite3.connect('clients.db')

def register_client(user_id, first_name, last_name, username):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR IGNORE INTO clients (telegram_id, name, username)
    VALUES (?, ?, ?)
    ''', (user_id, f"{first_name} {last_name}", username))
    
    conn.commit()
    conn.close()

def add_task(client_id, title, description, priority='—Å—Ä–µ–¥–Ω–∏–π'):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO tasks (client_id, title, description, priority)
    VALUES (?, ?, ?, ?)
    ''', (client_id, title, description, priority))
    
    task_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return task_id

def add_message(client_id, message_text, is_from_client=True):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO messages (client_id, message_text, is_from_client)
    VALUES (?, ?, ?)
    ''', (client_id, message_text, is_from_client))
    
    conn.commit()
    conn.close()

def add_order(client_id, order_number, description, amount=0):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO orders (client_id, order_number, description, amount)
    VALUES (?, ?, ?, ?)
    ''', (client_id, order_number, description, amount))
    
    conn.commit()
    conn.close()

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==================== #

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM clients')
    clients_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE status != "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"')
    tasks_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM messages WHERE is_from_client = 1 AND created_at > datetime("now", "-1 day")')
    new_messages = cursor.fetchone()[0]
    
    conn.close()
    
    text = (
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {tasks_count}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (24—á): {new_messages}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(text, reply_markup=admin_markup, parse_mode='HTML')

async def show_all_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT t.id, t.title, t.status, t.priority, c.name 
    FROM tasks t 
    JOIN clients c ON t.client_id = c.id 
    WHERE t.status != "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    ORDER BY t.created_at DESC
    ''')
    
    tasks = cursor.fetchall()
    conn.close()
    
    if not tasks:
        await update.message.reply_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    text = "üìä <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
    for task in tasks:
        text += f"‚Ä¢ #{task[0]}: {task[1]}\n"
        text += f"  üë§ {task[4]}\n"
        text += f"  üö¶ {task[2]} | ‚ö° {task[3]}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def show_all_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT c.telegram_id, c.name, c.username, 
           COUNT(t.id) as task_count,
           COUNT(m.id) as message_count
    FROM clients c
    LEFT JOIN tasks t ON c.id = t.client_id
    LEFT JOIN messages m ON c.id = m.client_id
    GROUP BY c.id
    ORDER BY c.created_at DESC
    ''')
    
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await update.message.reply_text("üë• –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return
    
    text = "üë• <b>–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n"
    for client in clients:
        text += f"‚Ä¢ ID: {client[0]}\n"
        text += f"  üë§ {client[1]}\n"
        text += f"  üìã –ó–∞–¥–∞—á: {client[3]}\n"
        text += f"  üìß –°–æ–æ–±—â–µ–Ω–∏–π: {client[4]}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

# ==================== –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==================== #

async def client_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_client(user.id, user.first_name, user.last_name, user.username)
    
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!</b>\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ üì¶ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
        "‚Ä¢ üìû –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    await update.message.reply_text(text, reply_markup=client_markup, parse_mode='HTML')

async def show_my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT id FROM clients WHERE telegram_id = ?
    ''', (update.effective_user.id,))
    
    client = cursor.fetchone()
    if not client:
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    cursor.execute('''
    SELECT title, description, status, priority 
    FROM tasks 
    WHERE client_id = ? AND status != "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    ORDER BY created_at DESC
    ''', (client[0],))
    
    tasks = cursor.fetchall()
    conn.close()
    
    if not tasks:
        await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    text = "üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    for i, task in enumerate(tasks, 1):
        text += f"{i}. <b>{task[0]}</b>\n"
        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {task[2]} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üë®‚Äçüíº <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:</b>\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "‚Ä¢ Email: manager@yourcompany.com\n"
        "‚Ä¢ Telegram: @your_manager\n\n"
        "üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 123-45-67\n"
        "‚Ä¢ Email: support@yourcompany.com\n"
        "‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: –ü–Ω-–ü—Ç 9:00-18:00\n\n"
        "üíº <b>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è:</b>\n"
        "‚Ä¢ Email: accounting@yourcompany.com\n\n"
        "<i>–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞–º –ø–æ–º–æ—á—å!</i>"
    )
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_client_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT id FROM clients WHERE telegram_id = ?', (user.id,))
    client = cursor.fetchone()
    
    if client:
        add_message(client[0], message_text, True)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}:</b>\n\n{message_text}",
            parse_mode='HTML'
        )
    
    conn.close()
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=client_markup
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================== #

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await admin_panel(update, context)
    else:
        await client_start(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id == ADMIN_ID:
        if text == 'üìä –í—Å–µ –∑–∞–¥–∞—á–∏':
            await show_all_tasks(update, context)
        elif text == 'üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã':
            await show_all_clients(update, context)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=admin_markup)
    else:
        if text == 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏':
            await show_my_tasks(update, context)
        elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            await show_contacts(update, context)
        elif text == 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å':
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        else:
            await handle_client_message(update, context)

# ==================== –ó–ê–ü–£–°–ö ==================== #

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute('SELECT COUNT(*) FROM tasks')
    if cursor.fetchone()[0] == 0:
        cursor.execute('SELECT id FROM clients WHERE telegram_id = ?', (ADMIN_ID,))
        admin_client_id = cursor.fetchone()
        if admin_client_id:
            add_task(admin_client_id[0], "–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏", "–≤—ã—Å–æ–∫–∏–π")
    
    conn.close()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    print("üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    
    application.run_polling()

if __name__ == '__main__':
    main()
