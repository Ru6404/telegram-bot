import os
import logging
import httpx
import uuid
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8253068855:AAFPNJke9PYju90RgZe4ZOKOuuMSJNAs0X8"

# –í–∞—à Auto-Cloud API
API_URL = "http://localhost:8000"

class AutoCloudClient:
    """–ü–æ–ª–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ Auto-Cloud API"""
    
    def __init__(self):
        self.base_url = API_URL
        self.session = httpx.AsyncClient(timeout=30.0)
    
    async def api_request(self, method: str, endpoint: str, data: dict = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API"""
        try:
            url = f"{self.base_url}{endpoint}"
            if method == "GET":
                response = await self.session.get(url)
            elif method == "POST":
                response = await self.session.post(url, json=data)
            elif method == "PUT":
                response = await self.session.put(url, json=data)
            elif method == "DELETE":
                response = await self.session.delete(url)
            
            return response.json() if response.status_code == 200 else None
            
        except Exception as e:
            logger.error(f"API Error: {e}")
            return None
    
    # Users endpoints
    async def get_users(self):
        return await self.api_request("GET", "/users")
    
    async def create_user(self, username: str, email: str):
        return await self.api_request("POST", "/users", {"username": username, "email": email})
    
    async def delete_user(self, user_id: str):
        return await self.api_request("DELETE", f"/users/{user_id}")
    
    # Todos endpoints  
    async def get_todos(self):
        return await self.api_request("GET", "/todos")
    
    async def create_todo(self, title: str, description: str):
        return await self.api_request("POST", "/todos", {"title": title, "description": description})
    
    async def delete_todo(self, todo_id: str):
        return await self.api_request("DELETE", f"/todos/{todo_id}")
    
    # System endpoints
    async def get_stats(self):
        return await self.api_request("GET", "/")
    
    async def get_health(self):
        return await self.api_request("GET", "/health")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
api = AutoCloudClient()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –≤—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞"""
    await update.message.reply_text(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Cloud System!*\n\n"
        "–Ø - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∞—à–µ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã!\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –≤–∞—à–∏–º API\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ `–º–µ–Ω—é` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!",
        parse_mode='Markdown'
    )

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
    await update.message.reply_text(
        "üè¢ *Auto-Cloud System Menu*\n\n"
        "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        "‚Ä¢ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏` - —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ `–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@mail.ru`\n"
        "‚Ä¢ `—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID`\n\n"
        "‚úÖ *–ó–∞–¥–∞—á–∏:*\n"
        "‚Ä¢ `–∑–∞–¥–∞—á–∏` - —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ `–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ`\n"
        "‚Ä¢ `—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ID`\n\n"
        "üìä *–°–∏—Å—Ç–µ–º–∞:*\n"
        "‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –º–µ—Ç—Ä–∏–∫–∏\n\n"
        "‚öôÔ∏è *API:*\n"
        "‚Ä¢ `api —Å—Ç–∞—Ç—É—Å` - –∑–¥–æ—Ä–æ–≤—å–µ API\n"
        "‚Ä¢ `api –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è` - —Å—Å—ã–ª–∫–∏",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message.text
    message_lower = message.lower()
    
    try:
        # 1. –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if message_lower in ['–º–µ–Ω—é', 'menu', '–∫–æ–º–∞–Ω–¥—ã']:
            await menu_command(update, context)
            return
        
        elif message_lower in ['—Å—Ç–∞—Ç—É—Å', 'status', '–∑–¥–æ—Ä–æ–≤—å–µ']:
            health = await api.get_health()
            if health:
                await update.message.reply_text(f"üü¢ *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n\n{health}", parse_mode='Markdown')
            else:
                await update.message.reply_text("üî¥ *API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!* –ó–∞–ø—É—Å—Ç–∏—Ç–µ `python main.py`", parse_mode='Markdown')
            return
        
        elif message_lower in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
            users = await api.get_users()
            todos = await api.get_todos()
            stats = await api.get_stats()
            
            response = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n"
            response += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users) if users else 0}\n"
            response += f"‚úÖ –ó–∞–¥–∞—á: {len(todos) if todos else 0}\n"
            response += f"üè¢ API: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if stats else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            return
        
        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        elif message_lower == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            users = await api.get_users()
            if not users:
                await update.message.reply_text("üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", parse_mode='Markdown')
                return
            
            users_list = "\n".join([f"‚Ä¢ üë§ {u['username']} ({u['email']}) - ID: {u['id']}" for u in users[:10]])
            await update.message.reply_text(f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):*\n\n{users_list}", parse_mode='Markdown')
            return
        
        elif message_lower.startswith('–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
            try:
                _, _, data = message.split(' ', 2)
                username, email = data.split(' ', 1)
                
                result = await api.create_user(username.strip(), email.strip())
                if result:
                    await update.message.reply_text(
                        f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n"
                        f"üë§ –ò–º—è: {result['username']}\n"
                        f"üìß Email: {result['email']}\n"
                        f"üÜî ID: {result['id']}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
            except:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω email@mail.ru`", parse_mode='Markdown')
            return
        
        elif message_lower.startswith('—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
            try:
                _, _, user_id = message.split(' ', 2)
                result = await api.delete_user(user_id.strip())
                if result:
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!", parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode='Markdown')
            except:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID`", parse_mode='Markdown')
            return
        
        # 3. –ó–∞–¥–∞—á–∏
        elif message_lower == '–∑–∞–¥–∞—á–∏':
            todos = await api.get_todos()
            if not todos:
                await update.message.reply_text("‚úÖ *–ó–∞–¥–∞—á–∏:*\n\n–ù–µ—Ç –∑–∞–¥–∞—á", parse_mode='Markdown')
                return
            
            todos_list = "\n".join([f"‚Ä¢ üìù {t['title']} - ID: {t['id']}" for t in todos[:10]])
            await update.message.reply_text(f"‚úÖ *–ó–∞–¥–∞—á–∏ ({len(todos)}):*\n\n{todos_list}", parse_mode='Markdown')
            return
        
        elif message_lower.startswith('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'):
            try:
                _, _, data = message.split(' ', 2)
                title, description = data.split(' ', 1)
                
                result = await api.create_todo(title.strip(), description.strip())
                if result:
                    await update.message.reply_text(
                        f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                        f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n"
                        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n"
                        f"üÜî ID: {result['id']}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏!*", parse_mode='Markdown')
            except:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –û–ø–∏—Å–∞–Ω–∏–µ`", parse_mode='Markdown')
            return
        
        elif message_lower.startswith('—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'):
            try:
                _, _, todo_id = message.split(' ', 2)
                result = await api.delete_todo(todo_id.strip())
                if result:
                    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {todo_id} —É–¥–∞–ª–µ–Ω–∞!", parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode='Markdown')
            except:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ID`", parse_mode='Markdown')
            return
        
        # 4. API —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        elif message_lower == 'api —Å—Ç–∞—Ç—É—Å':
            health = await api.get_health()
            stats = await api.get_stats()
            
            response = "üåê *API Status:*\n\n"
            response += f"‚Ä¢ Health: {'üü¢ OK' if health else 'üî¥ Down'}\n"
            response += f"‚Ä¢ Stats: {'üü¢ Available' if stats else 'üî¥ Unavailable'}\n"
            response += f"‚Ä¢ Endpoint: {API_URL}"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            return
        
        elif message_lower == 'api –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è':
            await update.message.reply_text(
                "üìö *API Documentation:*\n\n"
                f"‚Ä¢ Swagger: {API_URL}/docs\n"
                f"‚Ä¢ Redoc: {API_URL}/redoc\n"
                f"‚Ä¢ OpenAPI: {API_URL}/openapi.json",
                parse_mode='Markdown'
            )
            return
        
        # 5. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            await update.message.reply_text(
                "‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `–º–µ–Ω—é` –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å–∏—Å—Ç–µ–º—ã\n"
                "–ò–ª–∏ `—Å—Ç–∞—Ç—É—Å` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ö†Ô∏è *System Error!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("help", menu_command))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("üè¢ Auto-Cloud System Bot –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üì± –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ü–û–õ–ù–´–ô –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∞—à–µ–π —Å—Ö–µ–º—ã!")
        print("üåê API: http://localhost:8000")
        print("üìö Docs: http://localhost:8000/docs")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Startup Error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
